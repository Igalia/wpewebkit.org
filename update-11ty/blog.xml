<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WPE WebKit Blog</title>
  <description>News related to WPE WebKit.</description>
  <link href="https://wpewebkit.org/blog.xml" rel="self"/>
  <link href="https://wpewebkit.org/blog/"/>
  <updated>2024-10-07T00:00:00Z</updated>
  <id>https://wpewebkit.org/blog/</id>
  
  <entry>
    <title>WPE WebKit 2.46 highlights</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-wpewebkit-2.46.html"/>
    <updated>2024-10-07T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-wpewebkit-2.46.html</id>
    <content type="html">&lt;p&gt;A couple of weeks ago, the WPE WebKit team released version 2.46. This is an important milestone for the project as, for the first time in a stable series, the Skia backend takes over rendering. Skia brings significant improvements to the graphics stack, so we are very happy for this release. The list of changes goes beyond graphics, and it’s not short of awesome, so let’s have a look to what’s new!&lt;/p&gt;
&lt;h3 id=&quot;cairo-is-out%2C-skia-is-in&quot; tabindex=&quot;-1&quot;&gt;Cairo is out, Skia is in&lt;/h3&gt;
&lt;p&gt;We &lt;a href=&quot;https://blogs.igalia.com/carlosgc/2024/02/19/webkit-switching-to-skia-for-2d-graphics-rendering/&quot;&gt;announced&lt;/a&gt; some time ago that a new rendering backend with &lt;a href=&quot;https://skia.org/&quot;&gt;Skia&lt;/a&gt; was on the works and that it would eventually replace Cairo. 2.46 the first release series where Skia is used, bringing important improvements in rendering and performance.&lt;/p&gt;
&lt;p&gt;While Skia can use a GPU for rendering, our testing with common embedded SoCs has shown that the way WPE WebKit works may result in slightly worse performance in some cases than letting Skia use the CPU. Hence, for the 2.46 releases the latter is the default, while development continues to improve GPU usage on low-powered devices with the ultimate goal of making accelerated rendering the default choice in all cases.&lt;/p&gt;
&lt;p&gt;The Cairo backend is still present and will be selected automatically at build time for big-endian architectures, where Skia is not yet supported. We plan to remove support for Cairo in the near future, and this approach allows us to ship the new renderer while solving the remaining issues. At any rate, the Cairo renderer is no longer receiving active development.&lt;/p&gt;
&lt;p&gt;It is important to notice that it is recommended to build WPE with Clang instead of GCC. This comes from upstream Skia; see their &lt;a href=&quot;https://skia.org/docs/user/build/#supported-and-preferred-compilers&quot;&gt;supported and preferred compilers page&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&quot;graphics-stack-revamped&quot; tabindex=&quot;-1&quot;&gt;Graphics stack revamped&lt;/h3&gt;
&lt;p&gt;Tha switch to Skia has made possible a significant number of changes and improvements in the WebKit graphics stack. These changes relate to accelerated canvas, accelerated CSS filters, color spaces, and more. &lt;a href=&quot;https://blogs.igalia.com/carlosgc/2024/09/27/graphics-improvements-in-webkitgtk-and-wpewebkit-2-46/&quot;&gt;Carlos García has written extensively about these changes&lt;/a&gt; in his blog, we recommend reading his article for more details.&lt;/p&gt;
&lt;h3 id=&quot;trace-point-profiling-with-sysprof&quot; tabindex=&quot;-1&quot;&gt;Trace point profiling with sysprof&lt;/h3&gt;
&lt;p&gt;Sysprof is a profiling and performance analysis tool for Linux. Thanks to integration with &lt;code&gt;libsysprof-capture&lt;/code&gt;, it is now possible to use Sysprof to record trace points to do profiling and performance analysis of WebKit internals. This is a major improvement that will allow us to more effectively analyze the code paths that are more performance-sensitive and find ways to optimize them. It will also allow vendors to profile their specific hardware configurations and specific use-cases as well.&lt;/p&gt;
&lt;p&gt;For a more in-depth presentation of the integration with Sysprof, please read &lt;a href=&quot;https://feaneron.com/2024/07/12/profiling-a-web-engine/&quot;&gt;Georges Stavacras’ blog post on the topic&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;api-changes&quot; tabindex=&quot;-1&quot;&gt;API changes&lt;/h3&gt;
&lt;h4 id=&quot;additions&quot; tabindex=&quot;-1&quot;&gt;Additions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webkitgtk.org/reference/webkitgtk/unstable/method.Settings.apply_from_key_file.html&quot;&gt;&lt;code&gt;webkit_settings_apply_from_key_file()&lt;/code&gt;&lt;/a&gt; allows applying WebKit settings directly from a key file&lt;/li&gt;
&lt;li&gt;The console message API, which had been previously deprecated, has been brought to the current API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkitgtk.org/reference/webkitgtk/2.46.0/signal.AutomationSession.will-close.html&quot;&gt;&lt;code&gt;WebKitAutomationSession::will-close&lt;/code&gt;&lt;/a&gt; signal, which allows clients to perform cleanup tasks before an automation session is closed&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkitgtk.org/reference/webkitgtk/2.46.0/property.Settings.enable-2d-canvas-acceleration.html&quot;&gt;&lt;code&gt;enable-2d-canvas-acceleration&lt;/code&gt;&lt;/a&gt; WebSetting can be used to control 2D-canvas acceleration in Skia-enabled builds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webkit_web_view_toggle_inspector()&lt;/code&gt; shows or hides the web inspector for a given webview (only available with the WPE platform API)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;deprecations&quot; tabindex=&quot;-1&quot;&gt;Deprecations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WebKitWebView::insecure-content-detected&lt;/code&gt; signal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebKitWebContext:use-system-appearance-for-scrollbars&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webkit_web_context_set_use_system_appearance_for_scrollbars()&lt;/code&gt; and &lt;code&gt;webkit_web_context_get_use_system_appearance_for_scrollbars()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;gstreamer-customizations&quot; tabindex=&quot;-1&quot;&gt;GStreamer customizations&lt;/h3&gt;
&lt;p&gt;Compile-time platform-specific GStreamer customizations are now done at runtime, using the &lt;code&gt;WEBKIT_GST_QUIRKS&lt;/code&gt; and &lt;code&gt;WEBKIT_GST_HOLE_PUNCH_QUIRK&lt;/code&gt; environment variables. Setting their value to &lt;code&gt;help&lt;/code&gt; will return a help message with the possible values to &lt;code&gt;stderr&lt;/code&gt;. A list of the removed CMake defines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;USE_GSTREAMER_NATIVE_VIDEO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_GSTREAMER_NATIVE_AUDIO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_GSTREAMER_TEXT_SINK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_GSTREAMER_HOLEPUNCH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WPEWEBKIT_PLATFORM_WESTEROS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WPEWEBKIT_PLATFORM_BCM_NEXUS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WPEWEBKIT_PLATFORM_AMLOGIC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WPEWEBKIT_PLATFORM_RPI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WPEWEBKIT_PLATFORM_BROADCOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_WESTEROS_SINK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;web-platform-changes&quot; tabindex=&quot;-1&quot;&gt;Web Platform changes&lt;/h3&gt;
&lt;p&gt;The changes to supported Web Platform features between releases of WebKit are always substantial, and for that reason listing all of those changes here would be a major endeavour. The following is an incomplete list of some of the features that have been enabled, removed, and marked in preview state since 2.44, in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS Container/Style Queries&lt;/li&gt;
&lt;li&gt;CSS &lt;code&gt;text-wrap-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS &lt;code&gt;background-clip: border-area&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS &lt;code&gt;text-underline-position: left|right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS &lt;code&gt;scrollbar-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS View Transitions&lt;/li&gt;
&lt;li&gt;CSS Grid Masonry layout (preview)&lt;/li&gt;
&lt;li&gt;CSS &lt;code&gt;::target-text&lt;/code&gt; pseudo element&lt;/li&gt;
&lt;li&gt;WebCrypto X25519 algorithm (preview)&lt;/li&gt;
&lt;li&gt;AppCache support has been removed&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;Promise.try()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;Observable&lt;/code&gt; methods, like &lt;code&gt;.map()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-noteworthy-changes&quot; tabindex=&quot;-1&quot;&gt;Other noteworthy changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Suport for the WebP image format is now always enabled.&lt;/li&gt;
&lt;li&gt;WebDriver clients may now connect to an already running process, instead of always needing to spawn a new one.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;gst-libav&lt;/code&gt; AAC decoders are now disabled due to outstanding bugs. Distributors are encouraged to use the GStreamer FDK AAC decoder (part of &lt;code&gt;gst-plugins-bad&lt;/code&gt;) instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;and-much-more!&quot; tabindex=&quot;-1&quot;&gt;And much more!&lt;/h3&gt;
&lt;p&gt;WebKit evolves and changes a lot between major stable releases. Listing all changes would not be possible. There are countless bug fixes, performance improvements, new web features supported, and so on. We recommend checking the &lt;a href=&quot;https://wpewebkit.org/release/&quot;&gt;release notes&lt;/a&gt; and the git log for more details.&lt;/p&gt;
&lt;p&gt;The WPE WebKit team is already working on the 2.48 release, schedule for early next year. Until then!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Update on the Layer Based SVG Engine (LBSE) in WebKit</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/status-of-lbse-in-webkit.html"/>
    <updated>2024-05-21T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/status-of-lbse-in-webkit.html</id>
    <content type="html">&lt;p&gt;This blog entry gives an update on what we at &lt;a href=&quot;https://www.igalia.com/&quot;&gt;Igalia&lt;/a&gt; have done on upstreaming and development of LBSE in WebKit in the last seven months. For an explanation of
what LBSE is and how it is related to WPE, see this &lt;a href=&quot;https://wpewebkit.org/blog/05-new-svg-engine.html&quot;&gt;previous entry&lt;/a&gt; as a refresher.&lt;/p&gt;
&lt;div style=&quot;float: right&quot;&gt;
&lt;figure&gt;
  &lt;a class=&quot;btn&quot; href=&quot;https://www.igalia.com/&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;display: block; height: 100px;&quot; src=&quot;https://wpewebkit.org/assets/svg/igalia-tagline.svg&quot; alt=&quot;The Igalia logo&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;a class=&quot;btn&quot; href=&quot;https://wix.com/&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;display: block; height: 60px;&quot; src=&quot;https://wpewebkit.org/assets/svg/wix-logo.svg&quot; alt=&quot;The Wix logo&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Thanks to generous funding by &lt;a href=&quot;https://www.wix.com/&quot; alt=&quot;Wix homepage&quot;&gt;&lt;b&gt;Wix&lt;/b&gt;&lt;/a&gt;, which extensively uses SVG in their products and has a broad
knowledge of the SVG peculiarities across browser engines, LBSE has made great progress in the past seven months. During this period, several advanced SVG painting
features were implemented (e.g. clip-paths, masks, gradients, patterns), along with important performance improvements that expanded the new engine’s capabilities
and stability. All this was possible thanks to Wix’s decision to address their problems by funding upstream work at the core of WebKit, instead of accepting
the status-quo and implementing case-by-case fixes and workarounds on their end. As a result, WebKit-based browsers now benefit from the results of this fruitful
collaboration, which we’ll try to explain in more detail in this blog post.&lt;/p&gt;
&lt;h2 id=&quot;project-kick-off-and-webkit-contributors-meeting&quot; tabindex=&quot;-1&quot;&gt;Project kick off and WebKit Contributors Meeting&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;October 2023&lt;/strong&gt; we started the project mostly by thinking about the design and roadmap. We also did some general SVG bug fixing. For example, visual overflow computation for SVG renderers was &lt;a href=&quot;https://commits.webkit.org/268981@main&quot;&gt;corrected&lt;/a&gt;, which fixed quite a few SVG pixel tests. Various visual bugs were also fixed, such as &lt;a href=&quot;https://commits.webkit.org/269034@main&quot;&gt;unnecessary repainting when &lt;code&gt;viewBox&lt;/code&gt; is used on &amp;lt;svg&amp;gt; elements&lt;/a&gt;, and &lt;a href=&quot;https://commits.webkit.org/269360@main&quot;&gt;incorrect clipping for outermost &amp;lt;svg&amp;gt; elements&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also in the same month, we attended the &lt;a href=&quot;https://docs.webkit.org/Other/Contributor%20Meetings/ContributorMeeting2023.html&quot;&gt;WebKit Contributors Meeting&lt;/a&gt;, where we presented a talk on the LBSE (&lt;a href=&quot;https://www.slideshare.net/igalia/integrating-the-new-layerbased-svg-engine&quot;&gt;slides are available here&lt;/a&gt;). The feedback on LBSE at the meeting was very positive. Giving the talk early on in the process actually helped us since we needed to have a good design in place.&lt;/p&gt;
&lt;h2 id=&quot;supporting-svg-resources&quot; tabindex=&quot;-1&quot;&gt;Supporting SVG resources&lt;/h2&gt;
&lt;p&gt;The main focus in &lt;strong&gt;October 2023&lt;/strong&gt; was introducing the SVG resource concept, as already outlined in the WebKit Contributors Meeting talk. Thus, we started with &lt;a href=&quot;https://commits.webkit.org/269522@main&quot;&gt;adding a base SVG resource class: &lt;code&gt;RenderSVGResourceContainer&lt;/code&gt; &lt;/a&gt;. This class was kept as simple as possible, with no support for resource invalidation or repainting logic. The main task of &lt;code&gt;RenderSVGResourceContainer&lt;/code&gt; is to take care of registration so that the resource can be looked up by its clients.&lt;/p&gt;
&lt;p&gt;For the first SVG resource to implement, we chose the SVG &amp;lt;clip-path&amp;gt; element, so we landed &lt;a href=&quot;https://commits.webkit.org/269635@main&quot;&gt;&lt;code&gt;RenderSVGResourceClipper&lt;/code&gt;&lt;/a&gt;. To comply with the specification, the &lt;code&gt;RenderSVGResourceClipper&lt;/code&gt; implementation produces 1-bit masks and uses a special rendering mode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill-opacity&lt;/code&gt;/&lt;code&gt;stroke-opacity&lt;/code&gt;/&lt;code&gt;opacity&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;masker/filter not applied when rendering the children&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; set to solid black and &lt;code&gt;stroke&lt;/code&gt; set to &lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial implementation did not use caching of ImageBuffers for clipping, but relied on Porter-Duff DestinationIn/SourceOver compositing operations to achieve the same effect, but faster. By integrating &lt;code&gt;RenderSVGResourceClipper&lt;/code&gt; properly into &lt;code&gt;RenderLayer&lt;/code&gt;, it aligned SVG clipping with HTML/CSS clipping.&lt;/p&gt;
&lt;p&gt;Finally, the implementation prefers a pure clipping solution internally, as in legacy rendering, but for more complicated clip-paths (for example when the clip-path involves text content), a fallback to a mask is done.&lt;/p&gt;
&lt;h2 id=&quot;resource-invalidation-handling&quot; tabindex=&quot;-1&quot;&gt;Resource invalidation handling&lt;/h2&gt;
&lt;p&gt;After introducing the first SVG resource (&lt;code&gt;RenderSVGResourceClipper&lt;/code&gt;), we noticed some issues with handling invalidations for it, such as adding to clip-path contents. In the legacy engine, invalidations have been handled through layouting. This caused various problems: for one, it could cause calling the &lt;code&gt;setNeedsLayout&lt;/code&gt; method from within layout, which meant the invalidation chain depended on the DOM order.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;November 2023&lt;/strong&gt;, &lt;a href=&quot;https://commits.webkit.org/271017@main&quot;&gt;an implementation landed&lt;/a&gt; that avoided using layout for resource invalidation. Instead, on dynamic updates, the style system is used to determine the appropriate action:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For non resources, changes that cause renderer geometry changes, like changing the &lt;code&gt;x&lt;/code&gt; value of a &amp;lt;rect&amp;gt; element, still require a relayout. For visual changes not affecting geometry, like changing the fill color of a &amp;lt;rect&amp;gt;, a repaint action is enough.&lt;/li&gt;
&lt;li&gt;For resources, the resource is invalidated/updated with the change and any of its clients are repainted using the new resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;support-for-masks&quot; tabindex=&quot;-1&quot;&gt;Support for masks&lt;/h2&gt;
&lt;p&gt;With improved support for SVG resource invalidation, in &lt;strong&gt;late November 2023&lt;/strong&gt; we were ready to upstream support for the next SVG resource, &lt;a href=&quot;https://commits.webkit.org/271153@main&quot;&gt;RenderSVGResourceMasker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like the support for clip-path, &lt;code&gt;RenderSVGResourceMasker&lt;/code&gt; started out without caching image buffers and relied on creating temporary image buffers at rendering time. Mask content invalidations/changes were supported out of the box since we had improved resource invalidation handling (see above).&lt;/p&gt;
&lt;h2 id=&quot;support-for-gradients&quot; tabindex=&quot;-1&quot;&gt;Support for gradients&lt;/h2&gt;
&lt;p&gt;In early &lt;strong&gt;January 2024&lt;/strong&gt;, &lt;a href=&quot;https://commits.webkit.org/272653@main&quot;&gt;support for SVG gradients was upstreamed&lt;/a&gt;. Gradients are a kind of SVG resource that is a bit different to the previously implemented clipping paths and masks because it is a &lt;a href=&quot;https://www.w3.org/TR/SVG2/pservers.html&quot;&gt;paint server&lt;/a&gt;, so a helper class for that called &lt;code&gt;SVGPaintServerHandling&lt;/code&gt; and a base class &lt;code&gt;RenderSVGResourcePaintServer&lt;/code&gt; were introduced. The main difference is in invalidation: paint servers simply need a repaint of all its clients on invalidation, whereas clipping paths/masks may need to do more work; i.e., masks underlying image buffers need to be updated before its clients can be repainted.&lt;/p&gt;
&lt;h2 id=&quot;support-for-patterns-and-markers&quot; tabindex=&quot;-1&quot;&gt;Support for patterns and markers&lt;/h2&gt;
&lt;p&gt;By the end of &lt;strong&gt;January 2024&lt;/strong&gt;, &lt;a href=&quot;https://commits.webkit.org/273757@main&quot;&gt;support for SVG patterns was upstreamed&lt;/a&gt;. In the first implementation, no image buffer caching was implemented in order to keep things clean and simple. This implementation is different from the legacy implementation because the pattern contents are being rendered through pattern content layers (see &lt;a href=&quot;https://github.com/WebKit/WebKit/blob/main/Source/WebCore/rendering/RenderLayer.cpp#L2846&quot;&gt;&lt;code&gt;RenderLayer::paintSVGResourceLayer&lt;/code&gt;&lt;/a&gt;). To make this work, &lt;code&gt;RenderSVGResourcePattern&lt;/code&gt; has to set up the graphics context matrix correctly before calling &lt;code&gt;paintSVGResourceLayer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Around that same time, we implemented the next to last SVG resource on our TODO list, namely &lt;a href=&quot;https://commits.webkit.org/273820@main&quot;&gt;SVG markers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;svg-filters&quot; tabindex=&quot;-1&quot;&gt;SVG filters&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;February 2024&lt;/strong&gt;, Apple started work on &lt;a href=&quot;https://github.com/WebKit/WebKit/pull/25087&quot;&gt;supporting SVG filters&lt;/a&gt; in LBSE. A first iteration managed to fix a lot of the official SVG filter tests, but it turned out a &lt;a href=&quot;https://github.com/WebKit/WebKit/pull/25512&quot;&gt;filter regression&lt;/a&gt; had to be fixed first. Moreover, the initial work uncovered issues with the HTML/CSS filters implementation that need to be fixed in general. Finally, another reason why this support takes more time than some other features is that there is a strong requirement to make the support efficient in both memory usage and overall (re)painting speed. Still, the early results are very promising!&lt;/p&gt;
&lt;h2 id=&quot;cycle-detection&quot; tabindex=&quot;-1&quot;&gt;Cycle detection&lt;/h2&gt;
&lt;p&gt;It is quite easy in SVG to cause direct circular references:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;pattern&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#p&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    ...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to cause indirect circular references:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mask&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#z)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ellipse&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#z)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The legacy engine solved this in an ad-hoc way in various places in the engine; it tried to break cycles before rendering, but still needed cycle protections in various places, since the solution was never unified or complete.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;February 2024&lt;/strong&gt; we provided a unified solution for LBSE by introducing &lt;code&gt;SVGVisitedRendererTracking&lt;/code&gt;; &lt;a href=&quot;https://commits.webkit.org/274392@main&quot;&gt;see this commit&lt;/a&gt; for more. In the new approach, we don’t attempt to remove cycles, but detect them everywhere upon usage and stop processing in well-defined ways, all centralized in &lt;code&gt;SVGVisitedRendererTracking&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;nested-mask%2Fpattern-slowness&quot; tabindex=&quot;-1&quot;&gt;Nested mask/pattern slowness&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;April 2024&lt;/strong&gt;, we addressed the slowness problems with nested masks/patterns. As an example, consider this for nested masks:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mask&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#y)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#y)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            ...
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mask&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#x)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#x)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
            ...
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        ...
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ellipse&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#z)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this example, the complexity can be increased at will by adding more masks and contents per mask.&lt;/p&gt;
&lt;p&gt;The solution was twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For masks, we realized bounding box calculations for a mask were not affected by masks used in the mask contents, so we could cut off bounding box calculations for nested masks.&lt;/li&gt;
&lt;li&gt;For both masks and patterns, we added caching of image buffers per resource client so nested masks/patterns that are already encountered can reuse the image buffer cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See optimizations here for nested &lt;a href=&quot;https://commits.webkit.org/273820@main&quot;&gt;masks&lt;/a&gt; and &lt;a href=&quot;https://commits.webkit.org/277306@main&quot;&gt;patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;For the short and mid-term, the plan is to make LBSE at least as good as legacy in regards to test coverage; i.e., all tests that pass in legacy should pass in LBSE. We have made a lot of progress over the
last seven months just because of the amount of SVG resources that were implemented, but for example ,we will need to have SVG filters in place to pass this goal.&lt;/p&gt;
&lt;p&gt;Another goal is to make sure LBSE passes all security requirements, as failing that would be a blocker to replacing the current engine. Fortunately, we are already taking this into account in several ways, such as adopting a lot of good &lt;a href=&quot;https://github.com/WebKit/WebKit/wiki/Smart-Pointer-Usage-Guidelines&quot;&gt;smart pointer practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, a big goal will be for LBSE to perform well on certain benchmarks like &lt;a href=&quot;https://browserbench.org/MotionMark1.2/&quot;&gt;MotionMark&lt;/a&gt;, since WebKit has a golden rule to never ship a performance regression. So far there has not been an explicit focus
on performance, and we know there are likely optimizations possible in &lt;code&gt;RenderLayer&lt;/code&gt; usage, both in reducing the number of &lt;code&gt;RenderLayer&lt;/code&gt; objects we create in certain situations as well as a possible reduction in complexity of &lt;code&gt;RenderLayer&lt;/code&gt; for LBSE usage.&lt;/p&gt;
&lt;p&gt;All in all, we are very pleased with the results and the progress we made in the last seven months. We at &lt;a href=&quot;https://www.igalia.com/&quot;&gt;Igalia&lt;/a&gt; look forward to finishing the work to get the new engine in a shippable state in the near future!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>WPE WebKit 2.44 highlights</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-wpewebkit-2.44.html"/>
    <updated>2024-04-08T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-wpewebkit-2.44.html</id>
    <content type="html">&lt;p&gt;The WPE team released WPE WebKit 2.44 a few weeks ago. Let’s have a look at the most significant changes to the port for this release cycle.&lt;/p&gt;
&lt;h2 id=&quot;webkit%E2%80%99s-displaylink-support&quot; tabindex=&quot;-1&quot;&gt;WebKit’s DisplayLink support&lt;/h2&gt;
&lt;p&gt;DisplayLink is a WebCore feature that improves resource utilization and improves synchronization with vertical screen retrace. 2.44 adds an implementation of this feature for the WPE port that improves rendering performance.&lt;/p&gt;
&lt;h2 id=&quot;improved-hardware-acceleration-video-decoding-and-rendering&quot; tabindex=&quot;-1&quot;&gt;Improved hardware-acceleration video decoding and rendering&lt;/h2&gt;
&lt;p&gt;When WebKit is using GStreamer 1.24 or newer, video playback can use the new support for DRM modifiers in the DMA-BUF sink. This improves video decoding and rendering, as it allows for zero-copy negotiation with the video decoders.&lt;/p&gt;
&lt;h2 id=&quot;webcodec-api-supported&quot; tabindex=&quot;-1&quot;&gt;WebCodec API supported&lt;/h2&gt;
&lt;p&gt;WPE now supports the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API&quot;&gt;WebCodecs API&lt;/a&gt;, which allows web developers low-level access to video frames and audio chunks, a feature of importance for multimedia applications that need finer grain control over what gets played on the browser.&lt;/p&gt;
&lt;h2 id=&quot;other-noteworthy-changes&quot; tabindex=&quot;-1&quot;&gt;Other noteworthy changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Support for the JPEG2000 image format has been removed. WebKit was the only major engine still supporting the format, which these days is rarely used. As a consequence, OpenJPEG is no longer a dependency. JPEG2000 should not be confused with JPEG-XL, which is still supported.&lt;/li&gt;
&lt;li&gt;Support usage of libbacktrace, enabled by default at build time. This library provides quality stacktraces that can help developers and deployers more efficiently debug crashes in WPE-powered browsers.&lt;/li&gt;
&lt;li&gt;Many memory and stability improvements, particularly on the multimedia backends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes, please check the &lt;a href=&quot;https://wpewebkit.org/release/&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use Case: Server-side headless rendering</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-use-case-server-side-rendering.html"/>
    <updated>2024-02-01T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/2024-use-case-server-side-rendering.html</id>
    <content type="html">&lt;div class=&quot;success-top&quot;&gt;
&lt;img alt=&quot;WPE and server-side headless rendering&quot; align=&quot;center&quot; src=&quot;https://wpewebkit.org/assets/img/logo-server-side-rendering.png&quot; srcset=&quot;https://wpewebkit.org/assets/img/logo-server-side-rendering@2x.png 2x&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In many distributed applications, it can be useful to run a light web browser on the server side to render some HTML content or process images, video and/or audio using JavaScript.&lt;/p&gt;
&lt;p&gt;Some concrete use-cases can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video post-production using HTML overlays.&lt;/li&gt;
&lt;li&gt;Easy 3D rendering with WebGL that can be broadcasted as a video stream.&lt;/li&gt;
&lt;li&gt;Reusing the same JavaScript code between a frontend web application and the backend processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WPE WebKit is the perfect solution for all those use cases as it offers a lightweight solution which can run on low-end hardware or even within a container. It provides a lot of flexibility at the moment of choosing the backend infrastructure as WPE WebKit can, for instance, run from within a container with a very minimal Linux configuration (no need for any windowing system) and with full hardware acceleration and zero-copy of the video buffers between the GPU and the CPU.&lt;/p&gt;
&lt;p&gt;Additionally, the fact that WPE WebKit is optimized for lower-powered devices, makes it also the perfect option for server-side rendering when scaling commercial deployments while keeping cost under control, which is yet another important factor to take into account when considering cloud rendering.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A New WPE Backend Using EGLStream</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/07-creating-wpe-backends.html"/>
    <updated>2024-01-29T06:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/07-creating-wpe-backends.html</id>
    <content type="html">&lt;h2 id=&quot;what-is-a-wpe-backend%3F&quot; tabindex=&quot;-1&quot;&gt;What is a WPE Backend?&lt;/h2&gt;
&lt;div class=&quot;sidebar&quot;&gt;
&lt;p&gt;This article is a mashup of &lt;a href=&quot;https://blogs.igalia.com/llepage/the-process-of-creating-a-new-wpe-backend/&quot;&gt;The process of creating a new WPE
backend&lt;/a&gt;
and &lt;a href=&quot;https://blogs.igalia.com/llepage/use-eglstreams-in-a-wpe-webkit-backend/&quot;&gt;Use EGLStreams in a WPE WebKit
backend&lt;/a&gt;,
originally published at Loïc’s blog.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Depending on the target hardware WPE may need to use different techniques and
technologies to ensure correct graphical rendering. To be independent of any
user-interface toolkit and windowing system, WPE WebKit delegates the rendering
to a third-party API defined in the
&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe&quot;&gt;libwpe&lt;/a&gt; library. A concrete
implementation of this API is a “WPE backend”.&lt;/p&gt;
&lt;p&gt;WPE WebKit is a multiprocess application, the end-user starts and controls the
web widgets in the application process (which we often call “the &lt;abbr title=&quot;User Interface&quot;&gt;UI&lt;/abbr&gt; process” while the web engine itself uses
different subprocesses: &lt;code&gt;WPENetworkProcess&lt;/code&gt; is in charge of managing network
connections and &lt;code&gt;WPEWebProcess&lt;/code&gt; (or “web process”) in charge of the HTML and
JavaScript parsing, execution and rendering. The WPE backend is at a crossroads
between the UI process and one or more web process instances.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-1.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-1.svg&quot; alt=&quot;Diagram showing a box for the WPE backend in between the UI process and WPEWebProcess&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;The WPE backend is a shared library that is loaded at runtime by the web
process and by the UI process. It is used to render the visual aspect of a web
page and transfer the resulting video buffer from the web process to the
application process.&lt;/p&gt;
&lt;h2 id=&quot;backend-interfaces&quot; tabindex=&quot;-1&quot;&gt;Backend Interfaces&lt;/h2&gt;
&lt;p&gt;The WPE backend shared library must export at least one symbol called
&lt;code&gt;_wpe_loader_interface&lt;/code&gt; of type &lt;code&gt;struct wpe_loader_interface&lt;/code&gt; as defined &lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/loader.h#L57&quot;&gt;in
the &lt;em&gt;libwpe&lt;/em&gt;
API&lt;/a&gt;.
Presently its only member is &lt;code&gt;load_object&lt;/code&gt;, a callback function that receives a
string with an interface name and returns concrete implementations of the
following interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-host.h#L48&quot;&gt;struct wpe_renderer_host_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L75&quot;&gt;struct wpe_renderer_backend_egl_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L93&quot;&gt;struct wpe_renderer_backend_egl_target_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L115&quot;&gt;struct wpe_renderer_backend_egl_offscreen_target_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/view-backend.h#L63&quot;&gt;struct wpe_view_backend_interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The names passed to the &lt;code&gt;.load_object()&lt;/code&gt; function are the same as those of the
interface types, prefixed with an underscore. For example, a
&lt;code&gt;.load_object(&amp;quot;_wpe_renderer_host_interface&amp;quot;)&lt;/code&gt; call must return a pointer to a
&lt;code&gt;struct wpe_renderer_host_interface&lt;/code&gt; object.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Example C code for a &lt;code&gt;load_object&lt;/code&gt; callback.&lt;/summary&gt;
&lt;!-- load_object example &lt;&lt;&lt;1 --&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_host_interface&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_backend_egl_interface&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;my_backend_load_object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_wpe_renderer_host_interface&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;my_renderer_host&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_wpe_renderer_backend_egl_interface&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;my_renderer_backend_egl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_loader_interface&lt;/span&gt; _wpe_loader_interface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_backend_load_object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 1&gt;&gt;&gt; --&gt;
&lt;/details&gt;
&lt;p&gt;Each of these interfaces follow the same base structure: the &lt;code&gt;struct&lt;/code&gt; members
are callback functions, all interfaces have &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; members which
act as instance constructor and destructor, plus any additional “methods”.
The pointer returned by the &lt;code&gt;create&lt;/code&gt; callback will be passed as the &lt;code&gt;object&lt;/code&gt;
“instance” of the other methods:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_host_interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;create&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;destroy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;strong&gt;UI process&lt;/strong&gt; side WPE WebKit will create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One “renderer host” instance, using &lt;code&gt;wpe_renderer_host_interface.create()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multiple “renderer host client” instances, using &lt;code&gt;wpe_renderer_host_interface.create_client()&lt;/code&gt;.
These are mainly used for IPC communication, one instance gets created for
each web process launched by WebKit.&lt;/li&gt;
&lt;li&gt;Multiple “view backend” instances, using &lt;code&gt;wpe_view_backend_interface.create()&lt;/code&gt;.
One instance is created for each rendering target in the web process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each &lt;strong&gt;web process&lt;/strong&gt;—there can be more than one—WPE WebKit
will create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One “renderer backend EGL” instance, using &lt;code&gt;wpe_renderer_backend_egl_interface.create()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multiple “renderer backend EGL target” instances, using
&lt;code&gt;wpe_renderer_backend_egl_target_interface.create()&lt;/code&gt;. An instance is created
for each new rendering target needed by the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
  &lt;summary&gt;How about &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt;?&lt;/summary&gt;
    &lt;div&gt;
&lt;p&gt;The &lt;code&gt;rendererBackendEGLTarget&lt;/code&gt; instances may be created by the &lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt;, or
the &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt; depending on the interfaces implemented in the backend.&lt;/p&gt;
&lt;p&gt;Here we are only focusing on the &lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt; that is relying on a classical EGL
display (defined in the &lt;code&gt;rendererBackendEGL&lt;/code&gt; instance). The &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt; may
be used in very specific use-cases that are out of the scope of this post. You can check its usage in the WPE WebKit
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/f32cd0f7cb7961420ce08ae78b8f01f287bec199/Source/WebCore/platform/graphics/egl/GLContextLibWPE.cpp#L61&quot;&gt;source code&lt;/a&gt;
for more information.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;These instances typically communicate with each others using Unix sockets for
&lt;abbr title=&quot;Inter-Process Communication&quot;&gt;IPC&lt;/abbr&gt;. The IPC layer must be
implemented in the WPE backend itself because the &lt;em&gt;libwpe&lt;/em&gt; interfaces only pass
around the file descriptors to be used as communication endpoints.&lt;/p&gt;
&lt;p&gt;From a topological point of view, all those instances are organized as follows:&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-2.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-2.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;From an usage point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;rendererHost&lt;/code&gt; and &lt;code&gt;rendererHostClient&lt;/code&gt; instances are only used to manage
IPC endpoints on the UI process side that are connected to each running
web process. They are not used by the graphical rendering system.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rendererBackendEGL&lt;/code&gt; instance (one per web process) is only used to
connect to the native display for a specific platform. For example, on a
desktop Linux, the platform may be X11 where the native display would be the
result of calling &lt;code&gt;XOpenDisplay()&lt;/code&gt;; or the platform may be Wayland and in
this case the native display would be the result of calling
&lt;code&gt;wl_display_connect()&lt;/code&gt;; and so on.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rendererBackendEGLTarget&lt;/code&gt; (on the web process side) and &lt;code&gt;viewBackend&lt;/code&gt;
(on the UI process side) instances are the ones truly managing the web page
graphical rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;graphics-rendering&quot; tabindex=&quot;-1&quot;&gt;Graphics Rendering&lt;/h2&gt;
&lt;p&gt;As seen above, the interfaces in charge of the rendering are
&lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt; and &lt;code&gt;wpe_view_backend_interface&lt;/code&gt;.
During their creation, WPE WebKit exchanges the file descriptors used to
establish a direct IPC connection between a &lt;code&gt;rendererBackendEGL&lt;/code&gt; (in the
web process), and a &lt;code&gt;viewBackend&lt;/code&gt; (in the UI process).&lt;/p&gt;
&lt;p&gt;During the EGL initialization phase, when a new web process is launched, WebKit
will use the native display and platform provided by the
&lt;code&gt;wpe_renderer_backend_egl_interface.get_native_display()&lt;/code&gt; and &lt;code&gt;.get_platform()&lt;/code&gt;
functions to create a suitable OpenGL ES context.&lt;/p&gt;
&lt;p&gt;When WebKit’s
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/c22f641da18b8c4eee23b8021b37aeec69268675/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.cpp#L220&quot;&gt;ThreadedCompositor&lt;/a&gt;
is ready to render a new frame (in the web process), it calls the
&lt;code&gt;wpe_renderer_backend_egl_target_interface.frame_will_render()&lt;/code&gt; function to let
the WPE backend know that rendering is about to start. At this moment, the
previously created OpenGL ES context is made current to be used as the target
for GL drawing commands.&lt;/p&gt;
&lt;p&gt;Once the threaded compositor has finished drawing, it will swap the front and
back EGL buffers and call the
&lt;code&gt;wpe_renderer_backend_egl_target_interface.frame_rendered()&lt;/code&gt; function to signal
that the frame is ready. The compositor will then wait until the WPE backend
calls &lt;code&gt;wpe_renderer_backend_egl_target_dispatch_frame_complete()&lt;/code&gt; to indicate
that the compositor may produce a new frame.&lt;/p&gt;
&lt;p&gt;What happens inside the &lt;code&gt;.frame_will_render()&lt;/code&gt; and &lt;code&gt;.frame_rendered()&lt;/code&gt;
implementations is up to the WPE backend. As en example, it could
set up a &lt;a href=&quot;https://www.khronos.org/opengl/wiki/Framebuffer_Object&quot;&gt;Frame Buffer Object&lt;/a&gt;
to have the web content draw offscreen, in a texture that can be passed
back to the UI process for further processing, or use extensions like
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/KHR/EGL_KHR_stream.txt&quot;&gt;EGLStream&lt;/a&gt;,
or &lt;a href=&quot;https://registry.khronos.org/EGL/extensions/MESA/EGL_MESA_image_dma_buf_export.txt&quot;&gt;DMA-BUF exports&lt;/a&gt;
to transfer the frame to the UI process without copying the pixel data.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-3.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-3.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;Typically the backend sends each new frame to the corresponding view backend in
in its &lt;code&gt;.frame_rendered()&lt;/code&gt; function. The application can use the frame until it
sends back an &lt;abbr&gt;IPC&lt;/abbr&gt; message to the renderer target (in the web
process) to indicate that the frame is not in use anymore and may be be freed
or recycled. Although it is not a requirement to do it at this exact point,
usually when a renderer backend receives this message it calls the
&lt;code&gt;wpe_renderer_backend_egl_target_dispatch_frame_complete()&lt;/code&gt; function to trigger
the rendering of a new frame. As a side effect, this mechanism also allows
controlling the pace at which new frames are produced.&lt;/p&gt;
&lt;h2 id=&quot;using-eglstream&quot; tabindex=&quot;-1&quot;&gt;Using EGLStream&lt;/h2&gt;
&lt;p&gt;EGLStream is an EGL extension that defines a mechanism to transfer hardware
video buffers from one process to another efficiently, without getting them
out of GPU memory. Although the extension is supported only in Nvidia
hardware, it makes for a good example as it transparently handles some
complexities involved, like buffers with multiple planes.&lt;/p&gt;
&lt;p&gt;This backend uses the EGLStream extension to transfer graphics buffers from the
web process, which acts as a producer, to the UI process acting as a consumer.
The producer extension
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt&quot;&gt;EGL_KHR_stream_producer_eglsurface&lt;/a&gt;
allows creating a surface that may be used as target for rendering, then using
&lt;a href=&quot;https://registry.khronos.org/EGL/sdk/docs/man/html/eglSwapBuffers.xhtml&quot;&gt;eglSwapBuffers()&lt;/a&gt;
finishes drawing and sends the result to the consumer. Meanwhile, in the
consumer side, the
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/NV/EGL_NV_stream_consumer_eglimage.txt&quot;&gt;EGL_NV_stream_consumer_eglimage&lt;/a&gt;
extension is used to turn each buffer into an &lt;code&gt;EGLImage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reference source code for this WPE backend is available in the
&lt;a href=&quot;https://github.com/Igalia/WPEBackend-offscreen-nvidia&quot;&gt;WPEBackend-offscreen-nvidia&lt;/a&gt;
repository, which has been tested with WPE WebKit 2.38.x or 2.40.x, and
&lt;em&gt;libwpe&lt;/em&gt; version 1.14.x.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Behold, the Future Belongs to DMA-BUF!&lt;/summary&gt;
  &lt;div&gt;
&lt;p&gt;With the growing adoption of
&lt;a href=&quot;https://docs.kernel.org/driver-api/dma-buf.html&quot;&gt;DMA-BUF&lt;/a&gt; for sharing memory
buffers on modern Linux platforms, the WPE WebKit architecture will be
evolving and, in the future, the need for a WPE Backend should disappear in
most cases.&lt;/p&gt;
&lt;p&gt;Ongoing work on WPE WebKit removes the need to provide a WPE backend
implementation for most hardware platforms, with a generic implementation
using DMA-BUF provided as an integral, built-in feature of WebKit. It will
still be possible to provide external implementations for platforms that
might need to use custom buffer sharing mechanisms.&lt;/p&gt;
&lt;p&gt;From the application developer point of view, in most cases writing
programs that use the WPE WebKit API will be simpler, with the complexity
of the communication among multiple processes handled by WebKit.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;h3 id=&quot;stream-setup&quot; tabindex=&quot;-1&quot;&gt;Stream Setup&lt;/h3&gt;
&lt;p&gt;The steps needed to set up EGLStream endpoints need to be done in a particular
order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the consumer.&lt;/li&gt;
&lt;li&gt;Get the stream file descriptor for the consumer.&lt;/li&gt;
&lt;li&gt;Send the stream file descriptor to the producer.&lt;/li&gt;
&lt;li&gt;Create the producer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, the consumer needs to be created:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;EGLStream &lt;span class=&quot;token function&quot;&gt;createConsumerStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;EGLDisplay eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; EGLint s_streamAttribs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        EGL_STREAM_FIFO_LENGTH_KHR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EGL_NONE
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s_streamAttribs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;EGL_STREAM_FIFO_LENGTH_KHR&lt;/code&gt; parameter defines the length of the EGLStream
queue. If set to zero, the stream will work in “mailbox” mode and each time the
producer has a new frame it will empty the stream content and replace the frame
by the new one. If non-zero, the stream works work in “&lt;abbr title=&quot;First-In,
First-Out&quot;&gt;FIFO&lt;/abbr&gt;” mode, which means that the stream queue can contain up
to &lt;code&gt;EGL_STREAM_FIFO_LENGTH_KHR&lt;/code&gt; frames.&lt;/p&gt;
&lt;p&gt;Here we configure a queue for one frame because in this case the specification
of &lt;code&gt;EGL_KHR_stream_producer_eglsurface&lt;/code&gt; guarantees that calling
&lt;code&gt;eglSwapBuffers()&lt;/code&gt; on the producer the call will block until the consumer
retires the previous frame from queue. This is used as implicit synchronization
between the UI process side and the web process side without needing to rely on
custom IPC, which would add a small delay between frames.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR&lt;/code&gt; parameter defines the maximum
timeout in microseconds to wait on the consumer side to acquire a frame when
calling &lt;code&gt;eglStreamConsumerAcquireKHR()&lt;/code&gt;. It is only used with the
&lt;code&gt;EGL_KHR_stream_consumer_gltexture&lt;/code&gt; extension because the
&lt;code&gt;EGL_NV_stream_consumer_eglimage&lt;/code&gt; extension allows setting a timeout on each
call to &lt;code&gt;eglQueryStreamConsumerEventNV()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, to initialize the consumer using the &lt;code&gt;EGL_NV_stream_consumer_eglimage&lt;/code&gt;
extension it is enough to call the &lt;code&gt;eglStreamImageConsumerConnectNV()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once the consumer has been initialized&lt;/strong&gt;, you need to send the EGLStream
file descriptor to the producer process. The usual way of achieving this would
be using IPC between the two processes, sending the file descriptor in a
&lt;code&gt;SCM_RIGHTS&lt;/code&gt; message through an Unix socket—although with recent kernels
using &lt;a href=&quot;https://lwn.net/Articles/808997/&quot;&gt;pidfd_getfd()&lt;/a&gt; may be an option if
both processes are related.&lt;/p&gt;
&lt;p&gt;When the file descriptor is &lt;strong&gt;finally&lt;/strong&gt; received, the producer endpoint can be
created using the &lt;code&gt;EGL_KHR_stream_producer_eglsurface&lt;/code&gt; extension:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; EGLint surfaceAttribs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    EGL_WIDTH&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    EGL_HEIGHT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    EGL_NONE
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLStream eglStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamFromFileDescriptorKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; consumerFD&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLSurface eglSurface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamProducerSurfaceKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surfaceAttribs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with &lt;abbr title=&quot;Pixel Buffer&quot;&gt;pbuffer&lt;/abbr&gt; surfaces, the dimensions
need to be specified as surface attributes. When picking a frame buffer
configuration with &lt;code&gt;eglChooseConfig()&lt;/code&gt; the &lt;code&gt;EGL_SURFACE_TYPE&lt;/code&gt; attribute must
be set to &lt;code&gt;EGL_STREAM_BIT_KHR&lt;/code&gt;. From this point onwards, rendering proceeds as
usual: the EGL surface and context are made active, and once the painting is
done a call to &lt;code&gt;eglSwapBuffers()&lt;/code&gt; will “present” the frame, which in this case
means sending the buffer with the pixel data down the EGLStream to the
consumer.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part2-eglstream.md-1.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part2-eglstream.md-1.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;consuming-frames&quot; tabindex=&quot;-1&quot;&gt;Consuming Frames&lt;/h3&gt;
&lt;p&gt;While on the producer side rendering treats the EGLStream surface like any
other, on the consumer some more work is needed to manager the lifetime of
the data received: frames have to be manually acquired and released once
they are not needed anymore.&lt;/p&gt;
&lt;p&gt;The producer calls &lt;code&gt;eglQueryStreamConsumerEventNV()&lt;/code&gt; repeatedly to retire the
next event from the stream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_ADD_NV&lt;/code&gt; indicates that there is a buffer in the stream
that has not yet been bound to an &lt;code&gt;EGLImage&lt;/code&gt;, and the application needs to
create a new one to which the actual data will be bound later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_AVAILABLE_NV&lt;/code&gt; indicates that a new frame is available
and that it can be bound to the previously created &lt;code&gt;EGLImage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_REMOVE_NV&lt;/code&gt; indicates that a buffer has been retired from
the stream, and that its associated &lt;code&gt;EGLImage&lt;/code&gt; may be released once the
application has finished using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This translates roughly to the following code:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;constexpr&lt;/span&gt; EGLTime MAX_TIMEOUT_USEC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLImage eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EGL_NO_IMAGE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    EGLenum event &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    EGLAttrib data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// WARNING: The specification states that the timeout is in nanoseconds&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// (see: https://registry.khronos.org/EGL/extensions/NV/EGL_NV_stream_consumer_eglimage.txt)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// but in reality it is in microseconds, at least with the version 535.113.01 of the NVidia drivers.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eglQueryStreamConsumerEventNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MAX_TIMEOUT_USEC&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_ADD_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Bind an incoming buffer to an EGLImage.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglDestroyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_CONTEXT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_STREAM_CONSUMER_IMAGE_NV&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EGLClientBuffer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_REMOVE_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Buffer removed, EGLImage may be disposed.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              EGLImage image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EGLImage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token function&quot;&gt;eglDestroyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                  eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EGL_NO_IMAGE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_AVAILABLE_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// New frame available.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eglStreamAcquireImageNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;eglImage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_SYNC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*** Use the EGLImage here ***/&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;eglStreamReleaseImageNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_SYNC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application is free to use each &lt;code&gt;EGLImage&lt;/code&gt; as it sees fit. An obvious
example would be to use it as the contents for a texture, which then gets
painted in the “content” area of a web browser; or as the contents of the
screen for an in-game computer that the player can interact with, enabling
display of real, live web content as part of the gaming experience—now
&lt;em&gt;that&lt;/em&gt; would be a deeply embedded browser!&lt;/p&gt;
&lt;h3 id=&quot;one-last-thing&quot; tabindex=&quot;-1&quot;&gt;One Last Thing&lt;/h3&gt;
&lt;p&gt;There is a small showstopper to have EGLStream support working:
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/cb07c70c253a35b0e09e46e6100e1cdcebab26e2/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp#L135&quot;&gt;currently&lt;/a&gt;
when WPE WebKit uses surfaceless EGL contexts it sets the surface type to
&lt;code&gt;EGL_WINDOW_BIT&lt;/code&gt; attribute, while &lt;code&gt;EGL_STREAM_BIT_KHR&lt;/code&gt; would be needed
instead. &lt;a href=&quot;https://github.com/Igalia/WPEBackend-offscreen-nvidia/blob/main/wpewebkit-patches/005-fix-surfaceless-egl-context-creation.patch&quot;&gt;A small
patch&lt;/a&gt;
is enough to apply this tweak:&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;diff --git a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
index d5efa070..5f200edc 100644
&lt;span class=&quot;token coord&quot;&gt;--- a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp&lt;/span&gt;
&lt;span class=&quot;token coord&quot;&gt;+++ b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp&lt;/span&gt;
@@ -122,9 +122,11 @@ bool GLContextEGL::getEGLConfig(EGLDisplay display, EGLConfig* config, EGLSurfac
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_PIXMAP_BIT;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::WindowSurface:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::Surfaceless:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_WINDOW_BIT;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::Surfaceless:
&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_STREAM_BIT_KHR;
&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    }
&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    EGLint count;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- vim:set foldmethod=marker foldmarker=&lt;&lt;&lt;,&gt;&gt;&gt;: --&gt;
</content>
  </entry>
  
  <entry>
    <title>Integrating WPE: URI Scheme Handlers and Script Messages</title>
    <link href="https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html"/>
    <updated>2023-03-07T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html</id>
    <content type="html">&lt;p&gt;Most Web content is designed entirely for screen display—and there is &lt;em&gt;a
lot&lt;/em&gt; of it—so it will spend its life in the somewhat restricted sandbox
implemented by a web browser. But rich user interfaces using Web technologies
in all kinds of consumer devices require &lt;em&gt;some&lt;/em&gt; degree of integration, an
escape hatch to interact with the rest of their software and hardware. This is
where a Web engine like WPE designed to be &lt;em&gt;embeddable&lt;/em&gt; shines: not only does
WPE provide a &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/&quot;&gt;stable API&lt;/a&gt;, it is also comprehensive in
supporting a number of ways to &lt;em&gt;integrate&lt;/em&gt; with its environment further than
the plethora of available &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot;&gt;Web platform APIs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Integrating a “Web view” (the main &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/class.WebView.html&quot;&gt;entry point of the WPE embedding
API&lt;/a&gt;) involves providing extension points, which allow the
Web content (HTML/CSS/JavaScript) it loads to call into native code provided
by the client application (typically written in C/C++) from JavaScript, and
vice versa. There are a number of ways in which this can be achieved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#uri-scheme-handlers&quot;&gt;URI scheme handlers&lt;/a&gt;&lt;/strong&gt; allow native code to
register a custom &lt;abbr title=&quot;Uniform Resource Identifier&quot;&gt;URI&lt;/abbr&gt;
scheme, which will run a user provided
function to produce content that can be “fetched” regularly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#user-script-messages&quot;&gt;User script messaging&lt;/a&gt;&lt;/strong&gt; can be used to send JSON
messages from JavaScript running in the same context as Web pages to an user
function, and vice versa.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;JavaScriptCore API&lt;/strong&gt; is a powerful solution to provide new JavaScript
functionality to Web content seamlessly, almost as if they were implemented
inside the Web engine itself—akin to &lt;a href=&quot;https://nodejs.org/api/addons.html#c-addons&quot;&gt;NodeJS C++ addons&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post we will explore the first two, as they can support many
interesting use cases without introducing the additional complexity of
extending the JavaScript virtual machine. Let’s dive in!&lt;/p&gt;
&lt;h2 id=&quot;intermission&quot; tabindex=&quot;-1&quot;&gt;Intermission&lt;/h2&gt;
&lt;p&gt;We will be referring to the code of a tiny browser written for the occasion.
Telling WebKit how to call our native code involves creating a
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/class.UserContentManager.html&quot;&gt;WebKitUserContentManager&lt;/a&gt;, customizing it, and then
associating it with web views during their creation. The only exception to
this are &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#uri-scheme-handlers&quot;&gt;URI scheme handlers&lt;/a&gt;, which are registered
using &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.WebContext.register_uri_scheme.html&quot;&gt;webkit_web_context_register_uri_scheme()&lt;/a&gt;. This
minimal browser includes an &lt;code&gt;on_create_view&lt;/code&gt; function, which is the perfect
place to do the configuration:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; WebKitWebView&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;on_create_view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CogShell &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;shell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CogPlatform &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;platform&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    WebKitWebViewBackend &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;view_backend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cog_platform_get_view_backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;platform&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;view_backend&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;g_error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Cannot obtain view backend: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitUserContentManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; content_manager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create_content_manager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;/** NEW! **/&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;configure_web_context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cog_shell_get_web_context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shell&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;token comment&quot;&gt;/** NEW! **/&lt;/span&gt;
 
    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitWebView&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; web_view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;g_object_new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WEBKIT_TYPE_WEB_VIEW&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;token string&quot;&gt;&quot;user-content-manager&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content_manager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;/** NEW! **/&lt;/span&gt;
                     &lt;span class=&quot;token string&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cog_shell_get_web_settings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shell&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;token string&quot;&gt;&quot;web-context&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cog_shell_get_web_context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shell&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;token string&quot;&gt;&quot;backend&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; view_backend&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;cog_platform_init_web_view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;platform&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; web_view&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;webkit_web_view_load_uri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;web_view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s_starturl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g_steal_pointer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;web_view&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
  &lt;summary&gt;What is &lt;code&gt;g_autoptr&lt;/code&gt;?
    Does it relate to &lt;code&gt;g_steal_pointer&lt;/code&gt;?
    This does not look like C!&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;In the shown code examples, &lt;code&gt;g_autoptr(T)&lt;/code&gt; is a preprocessor macro provided by
GLib that declares a pointer variable of the &lt;code&gt;T&lt;/code&gt; type, and arranges for
freeing resources automatically when the variable goes out of scope. For
objects this results in
&lt;a href=&quot;https://docs.gtk.org/gobject/method.Object.unref.html&quot;&gt;g_object_unref()&lt;/a&gt;
being called.&lt;/p&gt;
&lt;p&gt;Internally the macro takes advantage of the &lt;code&gt;__attribute__((cleanup, ...))&lt;/code&gt;
compiler extension, which is supported by GCC and Clang. GLib also includes &lt;a href=&quot;https://docs.gtk.org/glib/func.DEFINE_AUTOPTR_CLEANUP_FUNC.html&quot;&gt;a
convenience
macro&lt;/a&gt; that
can be used to  define cleanups for your own types.&lt;/p&gt;
&lt;p&gt;As for &lt;code&gt;g_steal_pointer&lt;/code&gt;, it is useful to indicate that the ownership of a
pointer declared with &lt;code&gt;g_autoptr&lt;/code&gt; is transferred outside from the current
scope. The function returns the same pointer passed as parameter and
resets it to &lt;code&gt;NULL&lt;/code&gt;, thus preventing cleanup functions from running.&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;The size has been kept small thanks to reusing code from the &lt;a href=&quot;https://github.com/Igalia/cog#cog&quot;&gt;Cog
core&lt;/a&gt; library. As a bonus, it should
run on Wayland, X11, and even on a bare display using the &lt;abbr title=&quot;Direct
Rendering Manager&quot;&gt;DRM&lt;abbr&gt;/&lt;abbr title=&quot;Kernel Mode Setting&quot;&gt;KMS&lt;/abbr&gt;
subsystem directly. Compiling and running it, assuming you already have the
dependencies installed, should be as easy as running:&lt;/abbr&gt;&lt;/abbr&gt;&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;cc &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; minicog minicog.c &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;pkg-config cogcore &lt;span class=&quot;token parameter variable&quot;&gt;--libs&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--cflags&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
./minicog wpewebkit.org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the current session kind is not automatically detected, a second parameter
can be used to manually choose among &lt;code&gt;wl&lt;/code&gt; (Wayland), &lt;code&gt;x11&lt;/code&gt;, &lt;code&gt;drm&lt;/code&gt;, and so on:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;./minicog wpewebkit.org x11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The full, unmodified source for this minimal browser is included right below.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Complete &lt;code&gt;minicog.c&lt;/code&gt; source
    (&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://gist.github.com/aperezdc/f6a65a95f2baa222c0ce9d65e516e13b&quot;&gt;Gist&lt;/a&gt;)
  &lt;/summary&gt;
&lt;!-- minicog.c &lt;&lt;&lt;1 --&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;
/*
 * SPDX-License-Identifier: MIT
 *
 * cc -o minicog minicog.c $(pkg-config wpe-webkit-1.1 cogcore --cflags --libs)
 */
&amp;nbsp;
#include &amp;lt;cog/cog.h&amp;gt;
&amp;nbsp;
static const char *s_starturl = NULL;
&amp;nbsp;
static WebKitWebView*
on_create_view(CogShell *shell, CogPlatform *platform)
{
    g_autoptr(GError) error = NULL;
    WebKitWebViewBackend *view_backend = cog_platform_get_view_backend(platform, NULL, &amp;error);
    if (!view_backend)
        g_error(&quot;Cannot obtain view backend: %s&quot;, error-&gt;message);
&amp;nbsp;
    g_autoptr(WebKitWebView) web_view =
        g_object_new(WEBKIT_TYPE_WEB_VIEW,
                     &quot;settings&quot;, cog_shell_get_web_settings(shell),
                     &quot;web-context&quot;, cog_shell_get_web_context(shell),
                     &quot;backend&quot;, view_backend,
                     NULL);
    cog_platform_init_web_view(platform, web_view);
    webkit_web_view_load_uri(web_view, s_starturl);
    return g_steal_pointer(&amp;web_view);
}
&amp;nbsp;
int
main(int argc, char *argv[])
{
    g_set_application_name(&quot;minicog&quot;);
&amp;nbsp;
    if (argc != 2 &amp;&amp; argc != 3) {
        g_printerr(&quot;Usage: %s [URL [platform]]&#92;n&quot;, argv[0]);
        return EXIT_FAILURE;
    }
&amp;nbsp;
    g_autoptr(GError) error = NULL;
    if (!(s_starturl = cog_uri_guess_from_user_input(argv[1], TRUE, &amp;error)))
        g_error(&quot;Invalid URL &#39;%s&#39;: %s&quot;, argv[1], error-&gt;message);
&amp;nbsp;
    cog_modules_add_directory(COG_MODULEDIR);
&amp;nbsp;
    g_autoptr(GApplication) app = g_application_new(NULL, G_APPLICATION_DEFAULT_FLAGS);
    g_autoptr(CogShell) shell = cog_shell_new(&quot;minicog&quot;, FALSE);
    g_autoptr(CogPlatform) platform =
        cog_platform_new((argc == 3) ? argv[2] : g_getenv(&quot;COG_PLATFORM&quot;), &amp;error);
    if (!platform)
        g_error(&quot;Cannot create platform: %s&quot;, error-&gt;message);
&amp;nbsp;
    if (!cog_platform_setup(platform, shell, &quot;&quot;, &amp;error))
        g_error(&quot;Cannot setup platform: %s&#92;n&quot;, error-&gt;message);
&amp;nbsp;
    g_signal_connect(shell, &quot;create-view&quot;, G_CALLBACK(on_create_view), platform);
    g_signal_connect_swapped(app, &quot;shutdown&quot;, G_CALLBACK(cog_shell_shutdown), shell);
    g_signal_connect_swapped(app, &quot;startup&quot;, G_CALLBACK(cog_shell_startup), shell);
    g_signal_connect(app, &quot;activate&quot;, G_CALLBACK(g_application_hold), NULL);
&amp;nbsp;
    return g_application_run(app, 1, argv);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 1&gt;&gt;&gt; --&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id=&quot;uri-scheme-handlers&quot; tabindex=&quot;-1&quot;&gt;URI Scheme Handlers&lt;/h2&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://wpewebkit.org/assets/svg/URI_syntax_diagram.svg&quot; alt=&quot;“Railroad” diagram of URI syntax&quot; /&gt;
  &lt;figcaption&gt;URI syntax (&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://creativecommons.org/licenses/by-sa/4.0&quot;&gt;CC BY-SA 4.0&lt;/a&gt;,
    &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://commons.wikimedia.org/wiki/File:URI_syntax_diagram.svg&quot;&gt;source&lt;/a&gt;),
    notice the “scheme” component at the top left.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A URI scheme handler allows “teaching” the web engine how to handle &lt;em&gt;any&lt;/em&gt;
load (pages, subresources, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt;,
&lt;code&gt;XmlHttpRequest&lt;/code&gt;, …)—if you ever wondered how Firefox implements
&lt;code&gt;about:config&lt;/code&gt; or how Chromium does &lt;code&gt;chrome://flags&lt;/code&gt;, this is it. Also,
WPE WebKit has public API for this. Roughly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A custom URI scheme is registered using
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.WebContext.register_uri_scheme.html&quot;&gt;webkit_web_context_register_uri_scheme()&lt;/a&gt;. This also associates a callback function to it.&lt;/li&gt;
&lt;li&gt;When WebKit detects a load for the scheme, it invokes the provided
function, passing a
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/class.URISchemeRequest.html&quot;&gt;WebKitURISchemeRequest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The function generates data to be returned as the result of the load,
as a &lt;a href=&quot;https://docs.gtk.org/gio/class.InputStream.html&quot;&gt;GInputStream&lt;/a&gt;
and calls &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.URISchemeRequest.finish.html&quot;&gt;webkit_uri_scheme_request_finish()&lt;/a&gt;. This sends the stream to WebKit as the
response, indicating the length of the response (if known), and the
MIME content type of the data in the stream.&lt;/li&gt;
&lt;li&gt;WebKit will now read the data from the input stream.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;echoes&quot; tabindex=&quot;-1&quot;&gt;Echoes&lt;/h3&gt;
&lt;p&gt;Let’s add an echo handler to our &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#intermission&quot;&gt;minimal browser&lt;/a&gt; that
replies back with the requested URI. Registering the scheme is
straightforward enough:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;configure_web_context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitWebContext &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;webkit_web_context_register_uri_scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;token string&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                           handle_echo_request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* userdata */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* destroy_notify */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
  &lt;summary&gt;What are “user data” and “destroy notify”?&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;The &lt;code&gt;userdata&lt;/code&gt; parameter above is a convention used in many C libraries, and
specially in these based on GLib when there are callback functions involved.
It allows the &lt;em&gt;user&lt;/em&gt; to supply a pointer to arbitrary &lt;em&gt;data&lt;/em&gt;, which will be
passed later on as a parameter to the callback (&lt;code&gt;handle_echo_request&lt;/code&gt; in the
example) when it gets invoked later on.&lt;/p&gt;
&lt;p&gt;As for the &lt;code&gt;destroy_notify&lt;/code&gt; parameter, it allows passing a function with the
signature &lt;code&gt;void func(void*)&lt;/code&gt; (type
&lt;a href=&quot;https://docs.gtk.org/glib/callback.DestroyNotify.html&quot;&gt;GDestroyNotify&lt;/a&gt;) which
is invoked with &lt;code&gt;userdata&lt;/code&gt; as the argument once the user data is no longer
needed. In the example above, this callback function would be invoked when the
URI scheme is unregistered. Or, from a different perspective, this callback is
used to &lt;em&gt;notify&lt;/em&gt; that the user data can now be &lt;em&gt;destroyed&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;One way of implementing &lt;code&gt;handle_echo_request()&lt;/code&gt; could be wrapping the request
URI, which is part of the &lt;code&gt;WebKitURISchemeRequest&lt;/code&gt; parameter to the handler,
stash it into a &lt;a href=&quot;https://docs.gtk.org/glib/struct.Bytes.html&quot;&gt;GBytes&lt;/a&gt;
container, and &lt;a href=&quot;https://docs.gtk.org/gio/ctor.MemoryInputStream.new_from_bytes.html&quot;&gt;create an input stream to read back its
contents&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;handle_echo_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitURISchemeRequest &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;userdata&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;request_uri &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;webkit_uri_scheme_request_get_uri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;g_print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Request URI: %s&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request_uri&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g_bytes_new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request_uri&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request_uri&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GInputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g_memory_input_stream_new_from_bytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;webkit_uri_scheme_request_finish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g_bytes_get_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how we need to tell WebKit how to &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.URISchemeRequest.finish.html&quot;&gt;finish the load
request&lt;/a&gt;,
in this case only with the data stream, but it is possible to have &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.URISchemeRequest.finish_with_response.html&quot;&gt;more
control of the
response&lt;/a&gt;
or &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.URISchemeRequest.finish_error.html&quot;&gt;return an
error&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With these changes, it is now possible to make page loads from the new custom
URI scheme:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;Screenshot of the minicog browser loading a custom echo:// URI&quot; src=&quot;https://wpewebkit.org/assets/img/extending-minicog-echouri.png&quot; class=&quot;picture&quot; /&gt;
  &lt;figcaption&gt;It worked!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;et-tu%2C-cors%3F&quot; tabindex=&quot;-1&quot;&gt;Et Tu, CORS?&lt;/h3&gt;
&lt;p&gt;The main roadblock one may find when using custom URI schemes is that loads
are affected by &lt;abbr title=&quot;Cross-Origin Resource Sharing&quot;&gt;CORS&lt;/abbr&gt;
checks. Not only that, WebKit by default does &lt;em&gt;not&lt;/em&gt; allow sending cross-origin
requests to custom URI schemes. This is by design: instead of accidentally
leaking potentially sensitive data to websites, developers embedding a web
view &lt;em&gt;need&lt;/em&gt; to consciously opt-in to allow &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt; requests &lt;em&gt;and&lt;/em&gt;
send back suitable &lt;code&gt;Access-Control-Allow-*&lt;/code&gt; response headers.&lt;/p&gt;
&lt;p&gt;In practice, the additional setup involves
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.WebContext.get_security_manager.html&quot;&gt;retrieving&lt;/a&gt;
the &lt;code&gt;WebKitSecurityManager&lt;/code&gt; being used by the &lt;code&gt;WebKitWebContext&lt;/code&gt; and
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.SecurityManager.register_uri_scheme_as_cors_enabled.html&quot;&gt;registering the scheme as
CORS-enabled&lt;/a&gt;.
Then, in the handler function for the custom URI scheme, create a
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/class.URISchemeResponse.html&quot;&gt;WebKitURISchemeResponse&lt;/a&gt;,
which allows fine-grained control of the response, including setting
&lt;a href=&quot;https://libsoup.org/libsoup-3.0/struct.MessageHeaders.html&quot;&gt;headers&lt;/a&gt;,
and finishing the request instead with
&lt;code&gt;webkit_uri_scheme_request_finish_with_response()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that WebKit cuts some corners when using CORS with custom URI schemes:
handlers will &lt;em&gt;not&lt;/em&gt; receive preflight &lt;code&gt;OPTIONS&lt;/code&gt; requests. Instead, the CORS
headers from the replies are inspected, and if access needs to be denied
then the data stream with the response contents is discarded.&lt;/p&gt;
&lt;p&gt;In addition to providing a complete CORS-enabled custom URI scheme &lt;a href=&quot;https://gist.github.com/aperezdc/74809a6cd617faf445c22097a47bcb50&quot;&gt;example&lt;/a&gt;,
we recommend the &lt;a href=&quot;https://httptoolkit.com/will-it-cors&quot;&gt;Will It CORS?&lt;/a&gt; tool
to help troubleshoot issues.&lt;/p&gt;
&lt;h3 id=&quot;further-ideas&quot; tabindex=&quot;-1&quot;&gt;Further Ideas&lt;/h3&gt;
&lt;p&gt;Once we have WPE WebKit calling into our custom code, there are no limits
to what a URI scheme handler can do—as long as it involves replying
to requests. Here are some ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow pages to access a subset of paths from the local file system in a
controlled way (as &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#et-tu%2C-cors%3F&quot;&gt;CORS applies&lt;/a&gt;). For inspiration,
see &lt;a href=&quot;https://igalia.github.io/cog/class.DirectoryFilesHandler.html&quot;&gt;CogDirectoryFilesHandler&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Package all your web application assets into a single ZIP file, making
loads from &lt;code&gt;app:/...&lt;/code&gt; fetch content from it. Or, make the scheme handler
load data using &lt;a href=&quot;https://docs.gtk.org/gio/struct.Resource.html&quot;&gt;GResource&lt;/a&gt; and bundle the application
inside your program.&lt;/li&gt;
&lt;li&gt;Use the presence of a well-known custom URI to have a web application
realize that it is running on a certain device, and make its user
interface adapt accordingly.&lt;/li&gt;
&lt;li&gt;Provide a REST API, which internally calls into
&lt;a href=&quot;https://networkmanager.dev/&quot;&gt;NetworkManager&lt;/a&gt; to list and configure
wireless network adapters. Combine it with a local web application and
embedded devices can now easily get on the network.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;user-script-messages&quot; tabindex=&quot;-1&quot;&gt;User Script Messages&lt;/h2&gt;
&lt;p&gt;While &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#uri-scheme-handlers&quot;&gt;URI scheme handlers&lt;/a&gt;
allow streaming large chunks of data back into the Web engine, for exchanging
smaller pieces of information in a more programmatic fashion it may be
preferable to exchange messages without the need to trigger resource loads.
The user script messages part of the
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/class.UserContentManager.html&quot;&gt;WebKitUserContentManager&lt;/a&gt; API can be used this way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register a user message handler with
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.UserContentManager.register_script_message_handler.html&quot;&gt;webkit_user_content_manager_register_script_message_handler()&lt;/a&gt;.
As opposed to URI scheme handlers, this only enables receiving messages,
but does not associate a callback function &lt;em&gt;yet&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Associate a callback to the
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/signal.UserContentManager.script-message-received.html&quot;&gt;script-message-received&lt;/a&gt;
signal. The signal detail should be the name of the registered handler.&lt;/li&gt;
&lt;li&gt;Now, whenever JavaScript code calls
&lt;code&gt;window.webkit.messageHandlers.&amp;lt;name&amp;gt;.postMessage()&lt;/code&gt;, the signal is
emitted, and the native callback functions invoked.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
  &lt;summary&gt;Haven&#39;t I seen &lt;code&gt;postMessage()&lt;/code&gt; elsewhere?&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;Yes&lt;/a&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;you&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage&quot;&gt;have&lt;/a&gt;.
The name is the same because it provides a similar functionality (send a
message), it guarantees little (the receiver should validate messages), and
there are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;similar
restrictions&lt;/a&gt;
in the kind of values that can be passed along.&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&quot;it%E2%80%99s-all-javascript&quot; tabindex=&quot;-1&quot;&gt;It’s All JavaScript&lt;/h3&gt;
&lt;p&gt;Let’s add a feature to our &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/update-11ty/blog/06-integrating-wpe.html#intermission&quot;&gt;minimal browser&lt;/a&gt; that will allow
JavaScript code to trigger rebooting or powering off the device where it is
running. While this should definitely &lt;em&gt;not&lt;/em&gt; be functionality exposed to the
open Web, it is perfectly acceptable in an embedded device where we control
what gets loaded with WPE, and that exclusively uses a web application as its
user interface.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://wpewebkit.org/assets/img/pepe-silvia-all-javascript.jpg&quot; class=&quot;picture&quot; alt=&quot;Pepe Silvia conspiracy image meme, with the text “It&#39;s all JavaScript” superimposed&quot; /&gt;
  &lt;figcaption&gt;Yet most of the code shown in this post is C.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;First, create a &lt;code&gt;WebKitUserContentManager&lt;/code&gt;, register the message handler,
and connect a callback to its associated signal:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; WebKitUserContentManager&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;create_content_manager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;g_autoptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitUserContentManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; content_manager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;webkit_user_content_manager_new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;webkit_user_content_manager_register_script_message_handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content_manager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;powerControl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;g_signal_connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content_manager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;script-message-received::powerControl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;token function&quot;&gt;G_CALLBACK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handle_power_control_message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g_steal_pointer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;content_manager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The callback receives a &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/struct.JavascriptResult.html&quot;&gt;WebKitJavascriptResult&lt;/a&gt;, from which we
can get the &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-javascriptcore-1.1/class.Value.html&quot;&gt;JSCValue&lt;/a&gt; with the contents of the parameter
passed to the &lt;code&gt;postMessage()&lt;/code&gt; function. The &lt;code&gt;JSCValue&lt;/code&gt; can now be inspected
to check for malformed messages and determine the action to take, and
then arrange to call &lt;code&gt;reboot()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;handle_power_control_message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WebKitUserContentManager &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;content_manager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                             WebKitJavascriptResult &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;js_result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;userdata&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    JSCValue &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;webkit_javascript_result_get_js_value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;js_result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;jsc_value_is_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;g_warning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Invalid powerControl message: argument is not a string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    g_autofree &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;value_as_string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;jsc_value_to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value_as_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;poweroff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        action &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; RB_POWER_OFF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value_as_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reboot&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        action &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; RB_AUTOBOOT&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;g_warning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Invalid powerControl message: &#39;%s&#39;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value_as_string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;g_message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Device will %s now!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value_as_string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reboot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;reboot()&lt;/code&gt; system call above will most likely fail because it
needs administrative privileges. While the browser process could run as &lt;code&gt;root&lt;/code&gt;
to sidestep this issue—definitely &lt;em&gt;not&lt;/em&gt; recommended!—it would be
better to grant the &lt;code&gt;CAP_SYS_BOOT&lt;/code&gt; capability to the process, and &lt;em&gt;much&lt;/em&gt;
better to ask the system manager daemon to handle the job. In machines
using &lt;a href=&quot;https://systemd.io/&quot;&gt;systemd&lt;/a&gt; a good option is to call the &lt;code&gt;.Halt()&lt;/code&gt;
and &lt;code&gt;.Reboot()&lt;/code&gt; methods of its &lt;code&gt;org.freedesktop.systemd1&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Now we can write a small HTML document with some JavaScript sprinkled on top
to arrange sending the messages:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Device Power Control&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;reboot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Reboot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;poweroff&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Power Off&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webkit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageHandlers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;powerControl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;reboot&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;poweroff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete source code for this example can be found
&lt;a href=&quot;https://gist.github.com/aperezdc/621c1ec6bb78923e27fc035fa0689522&quot;&gt;in this Gist&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;going-in-the-other-direction&quot; tabindex=&quot;-1&quot;&gt;Going In The Other Direction&lt;/h3&gt;
&lt;p&gt;But how can one return values from user messages back to the JavaScript code
running in the context of the web page? Until recently, the only option
available was exposing some known function in the page’s JavaScript code, and
then using
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.WebView.run_javascript.html&quot;&gt;webkit_web_view_run_javascript()&lt;/a&gt;
to call it from native code later on. To make this more idiomatic and allow
waiting on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;, an approach like the following works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have convenience JavaScript functions wrapping the calls to
&lt;code&gt;.postMessage()&lt;/code&gt; which add an unique identifier as part of the message,
create a &lt;code&gt;Promise&lt;/code&gt;, and store it in a &lt;code&gt;Map&lt;/code&gt; indexed by the identifier.
The &lt;code&gt;Promise&lt;/code&gt; is itself returned from the functions.&lt;/li&gt;
&lt;li&gt;When the callback in native code handle messages, they need to take
note of the message identifier, and then use
&lt;code&gt;webkit_web_view_run_javascript()&lt;/code&gt; to pass it back, along with the
information needed to resolve the promise.&lt;/li&gt;
&lt;li&gt;The Javascript code running in the page takes the &lt;code&gt;Promise&lt;/code&gt; from
the &lt;code&gt;Map&lt;/code&gt; that corresponds to the identifier, and resolves it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make this approach a bit more palatable, we could tell WebKit to &lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-1.1/method.UserContentManager.add_script.html&quot;&gt;inject a
script&lt;/a&gt;
along with the regular content, which would provide the &lt;a href=&quot;https://gist.github.com/aperezdc/a112c6a61a5a11885eac2498702e3a6d&quot;&gt;helper
functions&lt;/a&gt;
needed to achieve this.&lt;/p&gt;
&lt;p&gt;Nevertheless, the approach outlined above is cumbersome and can be
tricky to get right, not to mention that the effort needs to be duplicated in
each application. Therefore, we have recently added new API hooks to provide this
as a built-in feature, so starting in WPE WebKit 2.40 the recommended approach
involves using
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-2.0/method.UserContentManager.register_script_message_handler_with_reply.html&quot;&gt;webkit_user_content_manager_register_script_message_handler_with_reply()&lt;/a&gt;
to register handlers instead. This way, calling &lt;code&gt;.postMessage()&lt;/code&gt; now returns a
&lt;code&gt;Promise&lt;/code&gt; to the JavaScript code, and the callbacks connected to the
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-2.0/signal.UserContentManager.script-message-with-reply-received.html&quot;&gt;script-message-with-reply-received&lt;/a&gt;
signal now receive a
&lt;a href=&quot;https://people.igalia.com/aperez/Documentation/wpe-webkit-2.0/struct.ScriptMessageReply.html&quot;&gt;WebKitScriptMessageReply&lt;/a&gt;,
which can be used to resolve the promise—either on the spot, or
asynchronously later on.&lt;/p&gt;
&lt;h3 id=&quot;even-more-ideas&quot; tabindex=&quot;-1&quot;&gt;Even More Ideas&lt;/h3&gt;
&lt;p&gt;User script messages are a powerful and rather flexible facility to make WPE
integrate web content into a complete system. The provided example is rather
simple, but as long as we do not need to pass huge amounts of data in
messages the possibilities are almost endless—especially with the
added convenience in WPE WebKit 2.40. Here are more ideas that can
be built on top of user script messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A handler could receive requests to “monitor” some object, and
return a &lt;code&gt;Promise&lt;/code&gt; that gets resolved when it has received changes.
For example, this could make the user interface of a smart thermostat
react to temperate updates from a sensor.&lt;/li&gt;
&lt;li&gt;A generic handler that takes the message payload and converts it into
&lt;a href=&quot;https://en.wikipedia.org/wiki/D-Bus&quot;&gt;D-Bus&lt;/a&gt; method calls, allowing
web pages to control many aspects of a typical Linux system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wrapping-up&quot; tabindex=&quot;-1&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;WPE has been designed from the ground up to integrate with the rest of the
system, instead of having a sole focus on rendering Web content inside a
monolithic web browser application. Accordingly, the public API must be
comprehensive enough to use it as a component of &lt;em&gt;any&lt;/em&gt; application. This
results in features that allow plugging into the web engine at different
layers to provide custom behaviour.&lt;/p&gt;
&lt;p&gt;At Igalia we have years of experience embedding WebKit into all kinds of
applications, and we are always sympathetic to the needs of such systems. If
you are interested collaborating with WPE development, or searching for a
solution that can tightly integrate web content in your device, feel free to
&lt;a href=&quot;https://www.igalia.com/contact/&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;!-- vim:set foldmethod=marker foldmarker=&lt;&lt;&lt;,&gt;&gt;&gt;: --&gt;
</content>
  </entry>
</feed>
