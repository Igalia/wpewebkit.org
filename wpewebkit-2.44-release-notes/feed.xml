<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WPEwebkit.org</title>
  <description>Release announcements and security advisories from WPEwebkit.org.</description>
  <link href="https://wpewebkit.org/feed.xml" rel="self"/>
  <link href="https://wpewebkit.org/"/>
  <updated>2024-03-26T00:00:00Z</updated>
  <id>https://wpewebkit.org/</id>
  
  <entry>
    <title>WebKitGTK and WPE WebKit Security Advisory WSA-2024-0002</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html"/>
    <updated>2024-03-26T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html</id>
    <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Date Reported: &lt;strong&gt;March 26, 2024&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advisory ID: &lt;strong&gt;WSA-2024-0002&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE identifiers: &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2024-23252&quot;&gt;CVE-2024-23252&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2024-23254&quot;&gt;CVE-2024-23254&lt;/a&gt;,
&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2024-23263&quot;&gt;CVE-2024-23263&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2024-23280&quot;&gt;CVE-2024-23280&lt;/a&gt;,
&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2024-23284&quot;&gt;CVE-2024-23284&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2023-42950&quot;&gt;CVE-2023-42950&lt;/a&gt;,
&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2023-42956&quot;&gt;CVE-2023-42956&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0002.html#CVE-2023-42843&quot;&gt;CVE-2023-42843&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several vulnerabilities were discovered in WebKitGTK and WPE WebKit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23252&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23252&quot;&gt;CVE-2024-23252&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to anbu1024 of SecANT.&lt;/li&gt;
&lt;li&gt;Impact: Processing web content may lead to a denial-of-service.
Description: The issue was addressed with improved memory handling.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 263758&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23254&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23254&quot;&gt;CVE-2024-23254&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to James Lee (@Windowsrcer).&lt;/li&gt;
&lt;li&gt;Impact: A malicious website may exfiltrate audio data cross-origin.
Description: The issue was addressed with improved UI handling.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 263795&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23263&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23263&quot;&gt;CVE-2024-23263&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to Johan Carlsson (joaxcar).&lt;/li&gt;
&lt;li&gt;Impact: Processing maliciously crafted web content may prevent
Content Security Policy from being enforced. Description: A logic
issue was addressed with improved validation.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 264811&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23280&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23280&quot;&gt;CVE-2024-23280&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to An anonymous researcher.&lt;/li&gt;
&lt;li&gt;Impact: A maliciously crafted webpage may be able to fingerprint the
user. Description: An injection issue was addressed with improved
validation.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 266703&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23284&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23284&quot;&gt;CVE-2024-23284&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to Georg Felber and Marco Squarcina.&lt;/li&gt;
&lt;li&gt;Impact: Processing maliciously crafted web content may prevent
Content Security Policy from being enforced. Description: A logic
issue was addressed with improved state management.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 267241&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2023-42950&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42950&quot;&gt;CVE-2023-42950&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to Nan Wang (@eternalsakura13) of 360 Vulnerability Research
Institute and rushikesh nandedkar.&lt;/li&gt;
&lt;li&gt;Impact: Processing maliciously crafted web content may lead to
arbitrary code execution. Description: A use after free issue was
addressed with improved memory management.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 263682&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2023-42956&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42956&quot;&gt;CVE-2023-42956&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to SungKwon Lee (Demon.Team).&lt;/li&gt;
&lt;li&gt;Impact: Processing web content may lead to a denial-of-service.
Description: The issue was addressed with improved memory handling.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 263989&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2023-42843&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42843&quot;&gt;CVE-2023-42843&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.44.0.&lt;/li&gt;
&lt;li&gt;Credit to Kacper Kwapisz (@KKKas_).&lt;/li&gt;
&lt;li&gt;Impact: Visiting a malicious website may lead to address bar
spoofing. Description: An inconsistent user interface issue was
addressed with improved state management.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 260046&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend updating to the latest stable versions of WebKitGTK and WPE
WebKit. It is the best way to ensure that you are running safe versions
of WebKit. Please check our websites for information about the latest
stable releases.&lt;/p&gt;
&lt;p&gt;Further information about WebKitGTK and WPE WebKit security advisories can be found at:
&lt;a href=&quot;https://webkitgtk.org/security.html&quot;&gt;https://webkitgtk.org/security.html&lt;/a&gt; or &lt;a href=&quot;https://wpewebkit.org/security/&quot;&gt;https://wpewebkit.org/security/&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>libwpe 1.16.0 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.16.0.html"/>
    <updated>2024-03-21T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.16.0.html</id>
    <content type="html">&lt;p&gt;This is the first stable release in the 1.16 series.&lt;/p&gt;
&lt;h3 id=&quot;highlights-of-the-libwpe-1.16.0-release&quot; tabindex=&quot;-1&quot;&gt;Highlights of the libwpe 1.16.0 release&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New API to override the default to override the default implementation
for subprocess launch and termination.&lt;/li&gt;
&lt;li&gt;New API for handling pointer lock events.&lt;/li&gt;
&lt;li&gt;Properly handle the EGL library when available without a &lt;code&gt;pkg-config&lt;/code&gt;
module file present.&lt;/li&gt;
&lt;li&gt;Allow resetting the full screen client to a null pointer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
libwpe-1.16.0.tar.xz (62.0 KiB)
   md5sum: 9779115aaa7e67abe642777394e7bfa2
   sha1sum: ea574e09b5d47461a5579a24006488419474d136
   sha256sum: c7f3a3c6b3d006790d486dc7cceda2b6d2e329de07f33bc47dfc53f00f334b2a
&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>WPE WebKit 2.44.0 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/wpewebkit-2.44.0.html"/>
    <updated>2024-03-20T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/wpewebkit-2.44.0.html</id>
    <content type="html">&lt;p&gt;This is the first stable release in the 2.44 series.&lt;/p&gt;
&lt;h3 id=&quot;highlights-of-the-wpe-webkit-2.44.0-release&quot; tabindex=&quot;-1&quot;&gt;Highlights of the WPE WebKit 2.44.0 release&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Allow disabling WebGL support using the API.&lt;/li&gt;
&lt;li&gt;Improve V-Blank synchronization when rendering.&lt;/li&gt;
&lt;li&gt;Use the buffer format preferred by the driver in DMA-BUF renderer.&lt;/li&gt;
&lt;li&gt;Do not block the compositing thread waiting for rendering threads.&lt;/li&gt;
&lt;li&gt;Improve performance when scaling images in &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Support usage of &lt;code&gt;libbacktrace&lt;/code&gt;, enabled by default at build time.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ENABLE_ACCESSIBILITY&lt;/code&gt; build option has been removed. Alternatively,
a new &lt;code&gt;USE_ATK&lt;/code&gt; option may be used to disable accessibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
wpewebkit-2.44.0.tar.xz (33.6 MiB)
   md5sum: fd82ff4f25456630fecef0e8cd0f0a22
   sha1sum: 6fbcb192e40f3d86952778995d34e0cbb63a44db
   sha256sum: 0741862b559da0cbbf8e0bccb057361f8a1c6a96178ba10aa0375030b01f05d4
&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Cog 0.18.3 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/cog-0.18.3.html"/>
    <updated>2024-02-26T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/cog-0.18.3.html</id>
    <content type="html">&lt;p&gt;This is a bug fix release in the stable 0.18 series.&lt;/p&gt;
&lt;h3 id=&quot;what%E2%80%99s-new-in-cog-0.18.3%3F&quot; tabindex=&quot;-1&quot;&gt;What’s new in Cog 0.18.3?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;drm: Fix handling of the scaling factor setting.&lt;/li&gt;
&lt;li&gt;gtk4: Take scaling factor into account for pointer events.&lt;/li&gt;
&lt;li&gt;launcher: Support toggling WebKit features with a new &lt;code&gt;--features&lt;/code&gt;/&lt;code&gt;-F&lt;/code&gt; command
line option, when built against WebKit 2.42.0 or newer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
cog-0.18.3.tar.xz (123.9 KiB)
   md5sum: e457de5b5ac8994ae9971c0a5a22b8a2
   sha1sum: 21df2a84c651b45e78d08e45e71631250a0078c3
   sha256sum: cd4ec937175a290ccd7c8ec398e4569aec04084cd94b11b2d83518778ba9d055
&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>WebKitGTK and WPE WebKit Security Advisory WSA-2024-0001</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html"/>
    <updated>2024-02-05T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html</id>
    <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Date Reported: &lt;strong&gt;February 05, 2024&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advisory ID: &lt;strong&gt;WSA-2024-0001&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE identifiers: &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2024-23222&quot;&gt;CVE-2024-23222&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2024-23206&quot;&gt;CVE-2024-23206&lt;/a&gt;,
&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2024-23213&quot;&gt;CVE-2024-23213&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2023-40414&quot;&gt;CVE-2023-40414&lt;/a&gt;,
&lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2023-42833&quot;&gt;CVE-2023-42833&lt;/a&gt;, &lt;a href=&quot;https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/security/WSA-2024-0001.html#CVE-2014-1745&quot;&gt;CVE-2014-1745&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several vulnerabilities were discovered in WebKitGTK and WPE WebKit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23222&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23222&quot;&gt;CVE-2024-23222&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.42.5.&lt;/li&gt;
&lt;li&gt;Credit to Apple.&lt;/li&gt;
&lt;li&gt;Impact: Processing maliciously crafted web content may lead to
arbitrary code execution. Apple is aware of a report that this issue
may have been exploited. Description: A type confusion issue was
addressed with improved checks.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 267134&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23206&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23206&quot;&gt;CVE-2024-23206&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.42.5.&lt;/li&gt;
&lt;li&gt;Credit to An anonymous researcher.&lt;/li&gt;
&lt;li&gt;Impact: A maliciously crafted webpage may be able to fingerprint the
user. Description: An access issue was addressed with improved
access restrictions.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 262699&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2024-23213&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23213&quot;&gt;CVE-2024-23213&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.42.5.&lt;/li&gt;
&lt;li&gt;Credit to Wangtaiyu of Zhongfu info.&lt;/li&gt;
&lt;li&gt;Impact: Processing web content may lead to arbitrary code execution.
Description: The issue was addressed with improved memory handling.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 266619&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2023-40414&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-40414&quot;&gt;CVE-2023-40414&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.42.1.&lt;/li&gt;
&lt;li&gt;Credit to Francisco Alonso (@revskills).&lt;/li&gt;
&lt;li&gt;Impact: Processing web content may lead to arbitrary code execution.
Description: A use-after-free issue was addressed with improved
memory management.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 258992&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2023-42833&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42833&quot;&gt;CVE-2023-42833&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.38.0.&lt;/li&gt;
&lt;li&gt;Credit to Dong Jun Kim (@smlijun) and Jong Seong Kim (@nevul37) of
AbyssLab.&lt;/li&gt;
&lt;li&gt;Impact: Processing web content may lead to arbitrary code execution.
Description: A correctness issue was addressed with improved checks.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 258592&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&quot;CVE-2014-1745&quot; href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1745&quot;&gt;CVE-2014-1745&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions affected: WebKitGTK and WPE WebKit before 2.42.0.&lt;/li&gt;
&lt;li&gt;Credit to An anonymous researcher.&lt;/li&gt;
&lt;li&gt;Impact: Processing a file may lead to a denial-of-service or
potentially disclose memory contents. Description: The issue was
addressed with improved checks.&lt;/li&gt;
&lt;li&gt;WebKit Bugzilla: 249434&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend updating to the latest stable versions of WebKitGTK and WPE
WebKit. It is the best way to ensure that you are running safe versions
of WebKit. Please check our websites for information about the latest
stable releases.&lt;/p&gt;
&lt;p&gt;Further information about WebKitGTK and WPE WebKit security advisories can be found at:
&lt;a href=&quot;https://webkitgtk.org/security.html&quot;&gt;https://webkitgtk.org/security.html&lt;/a&gt; or &lt;a href=&quot;https://wpewebkit.org/security/&quot;&gt;https://wpewebkit.org/security/&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>WPE WebKit 2.42.5 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/wpewebkit-2.42.5.html"/>
    <updated>2024-02-05T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/wpewebkit-2.42.5.html</id>
    <content type="html">&lt;p&gt;This is a bug fix release in the stable 2.42 series.&lt;/p&gt;
&lt;h3 id=&quot;what%E2%80%99s-new-in-wpe-webkit-2.42.5%3F&quot; tabindex=&quot;-1&quot;&gt;What’s new in WPE WebKit 2.42.5?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fix &lt;code&gt;webkit_web_context_allow_tls_certificate_for_host()&lt;/code&gt; to handle IPv6
URIs produced by &lt;code&gt;SoupURI&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ignore stops with offset zero before last one when rendering gradients
with Cairo.&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;bwrapinfo.json&lt;/code&gt; to disk for &lt;code&gt;xdg-desktop-portal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Support gamepad button sixteen (center button in center cluster).&lt;/li&gt;
&lt;li&gt;Update quirks to fix compatibility issues in a number of websites,
including &lt;code&gt;bing.com&lt;/code&gt;, &lt;code&gt;nfl.com&lt;/code&gt;, &lt;code&gt;msn.com&lt;/code&gt;, &lt;code&gt;bankofamerica.com&lt;/code&gt;,
&lt;code&gt;outlook.live.com&lt;/code&gt;, &lt;code&gt;hulu.com&lt;/code&gt;, &lt;code&gt;jsfiddle.net&lt;/code&gt;, &lt;code&gt;vote.gov&lt;/code&gt;,
&lt;code&gt;youtube.com&lt;/code&gt;, &lt;code&gt;airtable.com&lt;/code&gt;, &lt;code&gt;gizmodo.com&lt;/code&gt;, and &lt;code&gt;ceac.state.gov&lt;/code&gt;
among others.&lt;/li&gt;
&lt;li&gt;Fix incorrect periodic deletion of LocalStorage and IndexedDB databases
for all websites.&lt;/li&gt;
&lt;li&gt;Fix several crashes and rendering issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
wpewebkit-2.42.5.tar.xz (31.0 MiB)
   md5sum: d4bfd427199ded5a6fd91d7080290751
   sha1sum: 50a18f43452520e9f34f84c04bc0166af655ffff
   sha256sum: 4dbab6c5e6dc0c65a3d7dffc1c2390be5f9abd423faf983fe3a55fe081df0532
&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Use Case: Server-side headless rendering</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/blog/2024-use-case-server-side-rendering.html"/>
    <updated>2024-02-01T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/blog/2024-use-case-server-side-rendering.html</id>
    <content type="html">&lt;div class=&quot;success-top&quot;&gt;
&lt;img alt=&quot;WPE and server-side headless rendering&quot; align=&quot;center&quot; src=&quot;https://wpewebkit.org/assets/img/logo-server-side-rendering.png&quot; srcset=&quot;https://wpewebkit.org/assets/img/logo-server-side-rendering@2x.png 2x&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In many distributed applications, it can be useful to run a light web browser on the server side to render some HTML content or process images, video and/or audio using JavaScript.&lt;/p&gt;
&lt;p&gt;Some concrete use-cases can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video post-production using HTML overlays.&lt;/li&gt;
&lt;li&gt;Easy 3D rendering with WebGL that can be broadcasted as a video stream.&lt;/li&gt;
&lt;li&gt;Reusing the same JavaScript code between a frontend web application and the backend processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WPE WebKit is the perfect solution for all those use cases as it offers a lightweight solution which can run on low-end hardware or even within a container. It provides a lot of flexibility at the moment of choosing the backend infrastructure as WPE WebKit can, for instance, run from within a container with a very minimal Linux configuration (no need for any windowing system) and with full hardware acceleration and zero-copy of the video buffers between the GPU and the CPU.&lt;/p&gt;
&lt;p&gt;Additionally, the fact that WPE WebKit is optimized for lower-powered devices, makes it also the perfect option for server-side rendering when scaling commercial deployments while keeping cost under control, which is yet another important factor to take into account when considering cloud rendering.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A New WPE Backend Using EGLStream</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/blog/07-creating-wpe-backends.html"/>
    <updated>2024-01-29T06:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/blog/07-creating-wpe-backends.html</id>
    <content type="html">&lt;h2 id=&quot;what-is-a-wpe-backend%3F&quot; tabindex=&quot;-1&quot;&gt;What is a WPE Backend?&lt;/h2&gt;
&lt;div class=&quot;sidebar&quot;&gt;
&lt;p&gt;This article is a mashup of &lt;a href=&quot;https://blogs.igalia.com/llepage/the-process-of-creating-a-new-wpe-backend/&quot;&gt;The process of creating a new WPE
backend&lt;/a&gt;
and &lt;a href=&quot;https://blogs.igalia.com/llepage/use-eglstreams-in-a-wpe-webkit-backend/&quot;&gt;Use EGLStreams in a WPE WebKit
backend&lt;/a&gt;,
originally published at Loïc’s blog.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Depending on the target hardware WPE may need to use different techniques and
technologies to ensure correct graphical rendering. To be independent of any
user-interface toolkit and windowing system, WPE WebKit delegates the rendering
to a third-party API defined in the
&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe&quot;&gt;libwpe&lt;/a&gt; library. A concrete
implementation of this API is a “WPE backend”.&lt;/p&gt;
&lt;p&gt;WPE WebKit is a multiprocess application, the end-user starts and controls the
web widgets in the application process (which we often call “the &lt;abbr title=&quot;User Interface&quot;&gt;UI&lt;/abbr&gt; process” while the web engine itself uses
different subprocesses: &lt;code&gt;WPENetworkProcess&lt;/code&gt; is in charge of managing network
connections and &lt;code&gt;WPEWebProcess&lt;/code&gt; (or “web process”) in charge of the HTML and
JavaScript parsing, execution and rendering. The WPE backend is at a crossroads
between the UI process and one or more web process instances.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-1.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-1.svg&quot; alt=&quot;Diagram showing a box for the WPE backend in between the UI process and WPEWebProcess&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;The WPE backend is a shared library that is loaded at runtime by the web
process and by the UI process. It is used to render the visual aspect of a web
page and transfer the resulting video buffer from the web process to the
application process.&lt;/p&gt;
&lt;h2 id=&quot;backend-interfaces&quot; tabindex=&quot;-1&quot;&gt;Backend Interfaces&lt;/h2&gt;
&lt;p&gt;The WPE backend shared library must export at least one symbol called
&lt;code&gt;_wpe_loader_interface&lt;/code&gt; of type &lt;code&gt;struct wpe_loader_interface&lt;/code&gt; as defined &lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/loader.h#L57&quot;&gt;in
the &lt;em&gt;libwpe&lt;/em&gt;
API&lt;/a&gt;.
Presently its only member is &lt;code&gt;load_object&lt;/code&gt;, a callback function that receives a
string with an interface name and returns concrete implementations of the
following interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-host.h#L48&quot;&gt;struct wpe_renderer_host_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L75&quot;&gt;struct wpe_renderer_backend_egl_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L93&quot;&gt;struct wpe_renderer_backend_egl_target_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/renderer-backend-egl.h#L115&quot;&gt;struct wpe_renderer_backend_egl_offscreen_target_interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebPlatformForEmbedded/libwpe/blob/d7c669ca6f5ec0d544c264016d270669b336c931/include/wpe/view-backend.h#L63&quot;&gt;struct wpe_view_backend_interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The names passed to the &lt;code&gt;.load_object()&lt;/code&gt; function are the same as those of the
interface types, prefixed with an underscore. For example, a
&lt;code&gt;.load_object(&amp;quot;_wpe_renderer_host_interface&amp;quot;)&lt;/code&gt; call must return a pointer to a
&lt;code&gt;struct wpe_renderer_host_interface&lt;/code&gt; object.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Example C code for a &lt;code&gt;load_object&lt;/code&gt; callback.&lt;/summary&gt;
&lt;!-- load_object example &lt;&lt;&lt;1 --&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_host_interface&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_backend_egl_interface&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;my_backend_load_object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_wpe_renderer_host_interface&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;my_renderer_host&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_wpe_renderer_backend_egl_interface&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;my_renderer_backend_egl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_loader_interface&lt;/span&gt; _wpe_loader_interface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_backend_load_object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 1&gt;&gt;&gt; --&gt;
&lt;/details&gt;
&lt;p&gt;Each of these interfaces follow the same base structure: the &lt;code&gt;struct&lt;/code&gt; members
are callback functions, all interfaces have &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; members which
act as instance constructor and destructor, plus any additional “methods”.
The pointer returned by the &lt;code&gt;create&lt;/code&gt; callback will be passed as the &lt;code&gt;object&lt;/code&gt;
“instance” of the other methods:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;wpe_renderer_host_interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;create&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;destroy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;strong&gt;UI process&lt;/strong&gt; side WPE WebKit will create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One “renderer host” instance, using &lt;code&gt;wpe_renderer_host_interface.create()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multiple “renderer host client” instances, using &lt;code&gt;wpe_renderer_host_interface.create_client()&lt;/code&gt;.
These are mainly used for IPC communication, one instance gets created for
each web process launched by WebKit.&lt;/li&gt;
&lt;li&gt;Multiple “view backend” instances, using &lt;code&gt;wpe_view_backend_interface.create()&lt;/code&gt;.
One instance is created for each rendering target in the web process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each &lt;strong&gt;web process&lt;/strong&gt;—there can be more than one—WPE WebKit
will create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One “renderer backend EGL” instance, using &lt;code&gt;wpe_renderer_backend_egl_interface.create()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multiple “renderer backend EGL target” instances, using
&lt;code&gt;wpe_renderer_backend_egl_target_interface.create()&lt;/code&gt;. An instance is created
for each new rendering target needed by the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
  &lt;summary&gt;How about &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt;?&lt;/summary&gt;
    &lt;div&gt;
&lt;p&gt;The &lt;code&gt;rendererBackendEGLTarget&lt;/code&gt; instances may be created by the &lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt;, or
the &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt; depending on the interfaces implemented in the backend.&lt;/p&gt;
&lt;p&gt;Here we are only focusing on the &lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt; that is relying on a classical EGL
display (defined in the &lt;code&gt;rendererBackendEGL&lt;/code&gt; instance). The &lt;code&gt;wpe_renderer_backend_egl_offscreen_target_interface&lt;/code&gt; may
be used in very specific use-cases that are out of the scope of this post. You can check its usage in the WPE WebKit
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/f32cd0f7cb7961420ce08ae78b8f01f287bec199/Source/WebCore/platform/graphics/egl/GLContextLibWPE.cpp#L61&quot;&gt;source code&lt;/a&gt;
for more information.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;These instances typically communicate with each others using Unix sockets for
&lt;abbr title=&quot;Inter-Process Communication&quot;&gt;IPC&lt;/abbr&gt;. The IPC layer must be
implemented in the WPE backend itself because the &lt;em&gt;libwpe&lt;/em&gt; interfaces only pass
around the file descriptors to be used as communication endpoints.&lt;/p&gt;
&lt;p&gt;From a topological point of view, all those instances are organized as follows:&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-2.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-2.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;From an usage point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;rendererHost&lt;/code&gt; and &lt;code&gt;rendererHostClient&lt;/code&gt; instances are only used to manage
IPC endpoints on the UI process side that are connected to each running
web process. They are not used by the graphical rendering system.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rendererBackendEGL&lt;/code&gt; instance (one per web process) is only used to
connect to the native display for a specific platform. For example, on a
desktop Linux, the platform may be X11 where the native display would be the
result of calling &lt;code&gt;XOpenDisplay()&lt;/code&gt;; or the platform may be Wayland and in
this case the native display would be the result of calling
&lt;code&gt;wl_display_connect()&lt;/code&gt;; and so on.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rendererBackendEGLTarget&lt;/code&gt; (on the web process side) and &lt;code&gt;viewBackend&lt;/code&gt;
(on the UI process side) instances are the ones truly managing the web page
graphical rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;graphics-rendering&quot; tabindex=&quot;-1&quot;&gt;Graphics Rendering&lt;/h2&gt;
&lt;p&gt;As seen above, the interfaces in charge of the rendering are
&lt;code&gt;wpe_renderer_backend_egl_target_interface&lt;/code&gt; and &lt;code&gt;wpe_view_backend_interface&lt;/code&gt;.
During their creation, WPE WebKit exchanges the file descriptors used to
establish a direct IPC connection between a &lt;code&gt;rendererBackendEGL&lt;/code&gt; (in the
web process), and a &lt;code&gt;viewBackend&lt;/code&gt; (in the UI process).&lt;/p&gt;
&lt;p&gt;During the EGL initialization phase, when a new web process is launched, WebKit
will use the native display and platform provided by the
&lt;code&gt;wpe_renderer_backend_egl_interface.get_native_display()&lt;/code&gt; and &lt;code&gt;.get_platform()&lt;/code&gt;
functions to create a suitable OpenGL ES context.&lt;/p&gt;
&lt;p&gt;When WebKit’s
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/c22f641da18b8c4eee23b8021b37aeec69268675/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/ThreadedCompositor.cpp#L220&quot;&gt;ThreadedCompositor&lt;/a&gt;
is ready to render a new frame (in the web process), it calls the
&lt;code&gt;wpe_renderer_backend_egl_target_interface.frame_will_render()&lt;/code&gt; function to let
the WPE backend know that rendering is about to start. At this moment, the
previously created OpenGL ES context is made current to be used as the target
for GL drawing commands.&lt;/p&gt;
&lt;p&gt;Once the threaded compositor has finished drawing, it will swap the front and
back EGL buffers and call the
&lt;code&gt;wpe_renderer_backend_egl_target_interface.frame_rendered()&lt;/code&gt; function to signal
that the frame is ready. The compositor will then wait until the WPE backend
calls &lt;code&gt;wpe_renderer_backend_egl_target_dispatch_frame_complete()&lt;/code&gt; to indicate
that the compositor may produce a new frame.&lt;/p&gt;
&lt;p&gt;What happens inside the &lt;code&gt;.frame_will_render()&lt;/code&gt; and &lt;code&gt;.frame_rendered()&lt;/code&gt;
implementations is up to the WPE backend. As en example, it could
set up a &lt;a href=&quot;https://www.khronos.org/opengl/wiki/Framebuffer_Object&quot;&gt;Frame Buffer Object&lt;/a&gt;
to have the web content draw offscreen, in a texture that can be passed
back to the UI process for further processing, or use extensions like
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/KHR/EGL_KHR_stream.txt&quot;&gt;EGLStream&lt;/a&gt;,
or &lt;a href=&quot;https://registry.khronos.org/EGL/extensions/MESA/EGL_MESA_image_dma_buf_export.txt&quot;&gt;DMA-BUF exports&lt;/a&gt;
to transfer the frame to the UI process without copying the pixel data.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-3.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part1-basics.md-3.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;Typically the backend sends each new frame to the corresponding view backend in
in its &lt;code&gt;.frame_rendered()&lt;/code&gt; function. The application can use the frame until it
sends back an &lt;abbr&gt;IPC&lt;/abbr&gt; message to the renderer target (in the web
process) to indicate that the frame is not in use anymore and may be be freed
or recycled. Although it is not a requirement to do it at this exact point,
usually when a renderer backend receives this message it calls the
&lt;code&gt;wpe_renderer_backend_egl_target_dispatch_frame_complete()&lt;/code&gt; function to trigger
the rendering of a new frame. As a side effect, this mechanism also allows
controlling the pace at which new frames are produced.&lt;/p&gt;
&lt;h2 id=&quot;using-eglstream&quot; tabindex=&quot;-1&quot;&gt;Using EGLStream&lt;/h2&gt;
&lt;p&gt;EGLStream is an EGL extension that defines a mechanism to transfer hardware
video buffers from one process to another efficiently, without getting them
out of GPU memory. Although the extension is supported only in Nvidia
hardware, it makes for a good example as it transparently handles some
complexities involved, like buffers with multiple planes.&lt;/p&gt;
&lt;p&gt;This backend uses the EGLStream extension to transfer graphics buffers from the
web process, which acts as a producer, to the UI process acting as a consumer.
The producer extension
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/KHR/EGL_KHR_stream_producer_eglsurface.txt&quot;&gt;EGL_KHR_stream_producer_eglsurface&lt;/a&gt;
allows creating a surface that may be used as target for rendering, then using
&lt;a href=&quot;https://registry.khronos.org/EGL/sdk/docs/man/html/eglSwapBuffers.xhtml&quot;&gt;eglSwapBuffers()&lt;/a&gt;
finishes drawing and sends the result to the consumer. Meanwhile, in the
consumer side, the
&lt;a href=&quot;https://registry.khronos.org/EGL/extensions/NV/EGL_NV_stream_consumer_eglimage.txt&quot;&gt;EGL_NV_stream_consumer_eglimage&lt;/a&gt;
extension is used to turn each buffer into an &lt;code&gt;EGLImage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reference source code for this WPE backend is available in the
&lt;a href=&quot;https://github.com/Igalia/WPEBackend-offscreen-nvidia&quot;&gt;WPEBackend-offscreen-nvidia&lt;/a&gt;
repository, which has been tested with WPE WebKit 2.38.x or 2.40.x, and
&lt;em&gt;libwpe&lt;/em&gt; version 1.14.x.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Behold, the Future Belongs to DMA-BUF!&lt;/summary&gt;
  &lt;div&gt;
&lt;p&gt;With the growing adoption of
&lt;a href=&quot;https://docs.kernel.org/driver-api/dma-buf.html&quot;&gt;DMA-BUF&lt;/a&gt; for sharing memory
buffers on modern Linux platforms, the WPE WebKit architecture will be
evolving and, in the future, the need for a WPE Backend should disappear in
most cases.&lt;/p&gt;
&lt;p&gt;Ongoing work on WPE WebKit removes the need to provide a WPE backend
implementation for most hardware platforms, with a generic implementation
using DMA-BUF provided as an integral, built-in feature of WebKit. It will
still be possible to provide external implementations for platforms that
might need to use custom buffer sharing mechanisms.&lt;/p&gt;
&lt;p&gt;From the application developer point of view, in most cases writing
programs that use the WPE WebKit API will be simpler, with the complexity
of the communication among multiple processes handled by WebKit.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;h3 id=&quot;stream-setup&quot; tabindex=&quot;-1&quot;&gt;Stream Setup&lt;/h3&gt;
&lt;p&gt;The steps needed to set up EGLStream endpoints need to be done in a particular
order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the consumer.&lt;/li&gt;
&lt;li&gt;Get the stream file descriptor for the consumer.&lt;/li&gt;
&lt;li&gt;Send the stream file descriptor to the producer.&lt;/li&gt;
&lt;li&gt;Create the producer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, the consumer needs to be created:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;EGLStream &lt;span class=&quot;token function&quot;&gt;createConsumerStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;EGLDisplay eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; EGLint s_streamAttribs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        EGL_STREAM_FIFO_LENGTH_KHR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EGL_NONE
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s_streamAttribs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;EGL_STREAM_FIFO_LENGTH_KHR&lt;/code&gt; parameter defines the length of the EGLStream
queue. If set to zero, the stream will work in “mailbox” mode and each time the
producer has a new frame it will empty the stream content and replace the frame
by the new one. If non-zero, the stream works work in “&lt;abbr title=&quot;First-In,
First-Out&quot;&gt;FIFO&lt;/abbr&gt;” mode, which means that the stream queue can contain up
to &lt;code&gt;EGL_STREAM_FIFO_LENGTH_KHR&lt;/code&gt; frames.&lt;/p&gt;
&lt;p&gt;Here we configure a queue for one frame because in this case the specification
of &lt;code&gt;EGL_KHR_stream_producer_eglsurface&lt;/code&gt; guarantees that calling
&lt;code&gt;eglSwapBuffers()&lt;/code&gt; on the producer the call will block until the consumer
retires the previous frame from queue. This is used as implicit synchronization
between the UI process side and the web process side without needing to rely on
custom IPC, which would add a small delay between frames.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR&lt;/code&gt; parameter defines the maximum
timeout in microseconds to wait on the consumer side to acquire a frame when
calling &lt;code&gt;eglStreamConsumerAcquireKHR()&lt;/code&gt;. It is only used with the
&lt;code&gt;EGL_KHR_stream_consumer_gltexture&lt;/code&gt; extension because the
&lt;code&gt;EGL_NV_stream_consumer_eglimage&lt;/code&gt; extension allows setting a timeout on each
call to &lt;code&gt;eglQueryStreamConsumerEventNV()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, to initialize the consumer using the &lt;code&gt;EGL_NV_stream_consumer_eglimage&lt;/code&gt;
extension it is enough to call the &lt;code&gt;eglStreamImageConsumerConnectNV()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once the consumer has been initialized&lt;/strong&gt;, you need to send the EGLStream
file descriptor to the producer process. The usual way of achieving this would
be using IPC between the two processes, sending the file descriptor in a
&lt;code&gt;SCM_RIGHTS&lt;/code&gt; message through an Unix socket—although with recent kernels
using &lt;a href=&quot;https://lwn.net/Articles/808997/&quot;&gt;pidfd_getfd()&lt;/a&gt; may be an option if
both processes are related.&lt;/p&gt;
&lt;p&gt;When the file descriptor is &lt;strong&gt;finally&lt;/strong&gt; received, the producer endpoint can be
created using the &lt;code&gt;EGL_KHR_stream_producer_eglsurface&lt;/code&gt; extension:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; EGLint surfaceAttribs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    EGL_WIDTH&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    EGL_HEIGHT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    EGL_NONE
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLStream eglStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamFromFileDescriptorKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; consumerFD&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLSurface eglSurface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateStreamProducerSurfaceKHR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglDisplay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surfaceAttribs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with &lt;abbr title=&quot;Pixel Buffer&quot;&gt;pbuffer&lt;/abbr&gt; surfaces, the dimensions
need to be specified as surface attributes. When picking a frame buffer
configuration with &lt;code&gt;eglChooseConfig()&lt;/code&gt; the &lt;code&gt;EGL_SURFACE_TYPE&lt;/code&gt; attribute must
be set to &lt;code&gt;EGL_STREAM_BIT_KHR&lt;/code&gt;. From this point onwards, rendering proceeds as
usual: the EGL surface and context are made active, and once the painting is
done a call to &lt;code&gt;eglSwapBuffers()&lt;/code&gt; will “present” the frame, which in this case
means sending the buffer with the pixel data down the EGLStream to the
consumer.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://wpewebkit.org/assets/svg/part2-eglstream.md-1.svg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://wpewebkit.org/assets/svg/part2-eglstream.md-1.svg&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;consuming-frames&quot; tabindex=&quot;-1&quot;&gt;Consuming Frames&lt;/h3&gt;
&lt;p&gt;While on the producer side rendering treats the EGLStream surface like any
other, on the consumer some more work is needed to manager the lifetime of
the data received: frames have to be manually acquired and released once
they are not needed anymore.&lt;/p&gt;
&lt;p&gt;The producer calls &lt;code&gt;eglQueryStreamConsumerEventNV()&lt;/code&gt; repeatedly to retire the
next event from the stream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_ADD_NV&lt;/code&gt; indicates that there is a buffer in the stream
that has not yet been bound to an &lt;code&gt;EGLImage&lt;/code&gt;, and the application needs to
create a new one to which the actual data will be bound later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_AVAILABLE_NV&lt;/code&gt; indicates that a new frame is available
and that it can be bound to the previously created &lt;code&gt;EGLImage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EGL_STREAM_IMAGE_REMOVE_NV&lt;/code&gt; indicates that a buffer has been retired from
the stream, and that its associated &lt;code&gt;EGLImage&lt;/code&gt; may be released once the
application has finished using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This translates roughly to the following code:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;constexpr&lt;/span&gt; EGLTime MAX_TIMEOUT_USEC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
EGLImage eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EGL_NO_IMAGE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    EGLenum event &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    EGLAttrib data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// WARNING: The specification states that the timeout is in nanoseconds&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// (see: https://registry.khronos.org/EGL/extensions/NV/EGL_NV_stream_consumer_eglimage.txt)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// but in reality it is in microseconds, at least with the version 535.113.01 of the NVidia drivers.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eglQueryStreamConsumerEventNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MAX_TIMEOUT_USEC&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_ADD_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Bind an incoming buffer to an EGLImage.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglDestroyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;eglCreateImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_CONTEXT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_STREAM_CONSUMER_IMAGE_NV&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EGLClientBuffer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eglStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_REMOVE_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Buffer removed, EGLImage may be disposed.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              EGLImage image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EGLImage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token function&quot;&gt;eglDestroyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                  eglImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EGL_NO_IMAGE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; EGL_STREAM_IMAGE_AVAILABLE_NV&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// New frame available.&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eglStreamAcquireImageNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;eglImage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_SYNC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the next event.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*** Use the EGLImage here ***/&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;eglStreamReleaseImageNV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eglImage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EGL_NO_SYNC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application is free to use each &lt;code&gt;EGLImage&lt;/code&gt; as it sees fit. An obvious
example would be to use it as the contents for a texture, which then gets
painted in the “content” area of a web browser; or as the contents of the
screen for an in-game computer that the player can interact with, enabling
display of real, live web content as part of the gaming experience—now
&lt;em&gt;that&lt;/em&gt; would be a deeply embedded browser!&lt;/p&gt;
&lt;h3 id=&quot;one-last-thing&quot; tabindex=&quot;-1&quot;&gt;One Last Thing&lt;/h3&gt;
&lt;p&gt;There is a small showstopper to have EGLStream support working:
&lt;a href=&quot;https://github.com/WebKit/WebKit/blob/cb07c70c253a35b0e09e46e6100e1cdcebab26e2/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp#L135&quot;&gt;currently&lt;/a&gt;
when WPE WebKit uses surfaceless EGL contexts it sets the surface type to
&lt;code&gt;EGL_WINDOW_BIT&lt;/code&gt; attribute, while &lt;code&gt;EGL_STREAM_BIT_KHR&lt;/code&gt; would be needed
instead. &lt;a href=&quot;https://github.com/Igalia/WPEBackend-offscreen-nvidia/blob/main/wpewebkit-patches/005-fix-surfaceless-egl-context-creation.patch&quot;&gt;A small
patch&lt;/a&gt;
is enough to apply this tweak:&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;diff --git a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
index d5efa070..5f200edc 100644
&lt;span class=&quot;token coord&quot;&gt;--- a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp&lt;/span&gt;
&lt;span class=&quot;token coord&quot;&gt;+++ b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp&lt;/span&gt;
@@ -122,9 +122,11 @@ bool GLContextEGL::getEGLConfig(EGLDisplay display, EGLConfig* config, EGLSurfac
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_PIXMAP_BIT;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::WindowSurface:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::Surfaceless:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_WINDOW_BIT;
&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    case GLContextEGL::Surfaceless:
&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        attributeList[13] = EGL_STREAM_BIT_KHR;
&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;        break;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    }
&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;    EGLint count;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- vim:set foldmethod=marker foldmarker=&lt;&lt;&lt;,&gt;&gt;&gt;: --&gt;
</content>
  </entry>
  
  <entry>
    <title>libwpe 1.15.2 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.15.2.html"/>
    <updated>2024-01-25T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.15.2.html</id>
    <content type="html">&lt;p&gt;This is a development release leading towards the 1.16 series.&lt;/p&gt;
&lt;h3 id=&quot;what%E2%80%99s-new-in-libwpe-1.15.2%3F&quot; tabindex=&quot;-1&quot;&gt;What’s new in libwpe 1.15.2?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Allow resetting the fullscreen client to a null pointer.&lt;/li&gt;
&lt;li&gt;Fix usage of the &lt;code&gt;_wpe_loader_interface&lt;/code&gt; with the static loader.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
libwpe-1.15.2.tar.xz (62.0 KiB)
   md5sum: af8b981f8c620eca9a5672cab0cdd9d4
   sha1sum: 4a1712dbf331ecc70e6e82ebce2e4602fcef35c1
   sha256sum: 6d769f64cee0fb1b5069c3b250b0f91e5cd90564cd2efdf633442bab96e5dbe8
&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>libwpe 1.14.2 released</title>
    <link href="https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.14.2.html"/>
    <updated>2024-01-25T00:00:00Z</updated>
    <id>https://wpewebkit.org/wpewebkit.org/wpewebkit-2.44-release-notes/release/libwpe-1.14.2.html</id>
    <content type="html">&lt;p&gt;This is a bug fix release in the stable 1.14 series.&lt;/p&gt;
&lt;h3 id=&quot;what%E2%80%99s-new-in-libwpe-1.14.2%3F&quot; tabindex=&quot;-1&quot;&gt;What’s new in libwpe 1.14.2?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Allow resetting the fullscreen client to a null pointer.&lt;/li&gt;
&lt;li&gt;Fix usage of the &lt;code&gt;_wpe_loader_interface&lt;/code&gt; with the static loader.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;checksums&quot; tabindex=&quot;-1&quot;&gt;Checksums&lt;/h4&gt;
&lt;pre&gt;
libwpe-1.14.2.tar.xz (61.6 KiB)
   md5sum: 61840e24ba0a0f5828194dff28db92ee
   sha1sum: 70a2b894af2b50d7082260158a89524974a480f3
   sha256sum: 8ae38022c50cb340c96fdbee1217f1e46ab57fbc1c8ba98142565abbedbe22ef
&lt;/pre&gt;
</content>
  </entry>
</feed>